#! /usr/bin/env python
################################
#  Initial setup and settings  #
################################
import libtcodpy as libtcod
import math
import textwrap
import shelve
####### GRAPHIC SETTINGS #######
FONT = 'font/arial12x12.png'
LIMIT_FPS = 20 # Max frames per second

# Screen Dimensions
SCREEN_WIDTH = 80
SCREEN_HEIGHT = 50

# Map Dimensions
MAP_WIDTH = 80
MAP_HEIGHT = 45

# GUI Dimensions
BAR_WIDTH = 20
PANEL_HEIGHT = 8
PANEL_Y = SCREEN_HEIGHT - PANEL_HEIGHT

# GUI Message Bar
MSG_X = BAR_WIDTH + 2
MSG_WIDTH = SCREEN_WIDTH - BAR_WIDTH - 2
MSG_HEIGHT = PANEL_HEIGHT - 1

# Level Screen
LEVEL_SCREEN_WIDTH = 40
CHARACTER_SCREEN_WIDTH = 30

# Colors for Building
#color_dark_wall = libtcod.Color(0, 0, 100)
color_dark_wall = libtcod.dark_grey
#color_light_wall = libtcod.Color(130, 110, 50)
color_light_wall = libtcod.desaturated_orange
#color_dark_ground = libtcod.Color(50, 50, 150)
color_dark_ground = libtcod.grey
#color_light_ground = libtcod.Color(200, 180, 50)
color_light_ground = libtcod.desaturated_yellow

################################
###### GAMEPLAY SETTINGS #######
# Dungeon Generator Dimensions
ROOM_MAX_SIZE = 10
ROOM_MIN_SIZE = 6
MAX_ROOMS = 30

# Max in rooms
MAX_ROOM_MONSTERS = 3
MAX_ROOM_ITEMS = 2

# FOV
FOV_ALGO = 0  #default FOV algorithm
FOV_LIGHT_WALLS = True
TORCH_RADIUS = 10

# Inventory
INVENTORY_WIDTH = 50

HEAL_AMOUNT = 40
LIGHTNING_DAMAGE = 40
LIGHTNING_RANGE = 5
CONFUSE_NUM_TURNS = 10
FIREBALL_RADIUS = 3
FIREBALL_DAMAGE = 25

# Leveling
LEVEL_UP_BASE = 200
LEVEL_UP_FACTOR = 150
################################
#   Items, Classes, Monsters   #
################################
### Creatures ###
# Player Classes
class Fighter:
    def __init__(self, hp, defense, power, xp, death_function=None):
        self.max_hp = hp
        self.hp = hp
        self.defense = defense
        self.power = power
        self.xp = xp
        self.death_function = death_function

    def attack(self, target):
        # Damage formula, need to work with this
        damage = self.power - target.fighter.defense
        if damage > 0:
            message(self.owner.name.capitalize() + ' damages ' + target.name )
            target.fighter.take_damage(damage)

        else:
            message(self.owner.name.capitalize() + ' attacks ' + target.name + ' but was unable to cause any damage')

    def take_damage(self, damage):
        if damage > 0:
            self.hp -= damage
            if self.hp <= 0:
                function = self.death_function
                if function is not None:
                    function(self.owner)
                if self.owner != player:
                    player.fighter.xp += self.xp

    def heal(self, amount):
        self.hp += amount
        if self.hp > self.max_hp:
            self.hp = self.max_hp


# Monster Classes
class BasicMonster:
    def take_turn(self):
        #Basic monster AI = if you can see it, it can see you
        monster = self.owner
        if libtcod.map_is_in_fov(fov_map, monster.x, monster.y):
            # If not close, move towards player
            if monster.distance_to(player) >= 2:
                monster.move_towards(player.x, player.y)
            # If close, attack! (if alive)
            elif player.fighter.hp > 0:
                monster.fighter.attack(player)

#################
### Items ###
class Item:
    def __init__(self, use_function = None):
        self.use_function = use_function

    def use(self):
        if self.use_function == None:
            message ('The ' + self.owner.name + ' cannot be used')
        else:
            if self.use_function() != 'cancelled':
                inventory.remove(self.owner)

    def pick_up(self):
        # Add to inventory, remove from map
        if len(inventory) >= 26:
            message('Your inventory is full!')
        else:
            inventory.append(self.owner)
            objects.remove(self.owner)
            message ('Picked up ' + self.owner.name, libtcod.green)

    def drop(self):
        objects.append(self.owner)
        inventory.remove(self.owner)
        self.owner.x = player.x
        self.owner.y = player.y
        message('You drop ' + self.owner.name, libtcod.yellow)

################################
#           Building           #
################################
######### Initial definitions #########
# Tiles
class Tile:
    def __init__(self, blocked, block_sight = None):
        self.blocked = blocked

        # All lines start unexplored
        self.explored = False
        
        # By default, blocked tile blocks sight
        if block_sight is None: block_sight = blocked
        self.block_sight = block_sight

# Rectangles for rooms and structures
class Rect:
    def __init__(self, x, y, w, h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h

    def center(self):
        center_x = (self.x1 + self.x2) / 2
        center_y = (self.y1 + self.y2) / 2
        return (center_x, center_y)
 
    def intersect(self, other):
        #returns true if this rectangle intersects with another one
        return (self.x1 <= other.x2 and self.x2 >= other.x1 and
                self.y1 <= other.y2 and self.y2 >= other.y1)
######### Functions for mapmaking ######### 
# Rooms
def create_room(room):
    global map
    #go through the tiles in the rectangle and make them passable    
    for x in range(room.x1 + 1, room.x2):
        for y in range(room.y1 + 1, room.y2):
            map[x][y].blocked = False
            map[x][y].block_sight = False

# Tunnel / Horisontal
def create_h_tunnel(x1, x2, y):
    global map
    #horizontal tunnel. min() and max() are used in case x1>x2
    for x in range(min(x1, x2), max(x1, x2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

# Tunnel / Vertical
def create_v_tunnel(y1, y2, x):
    global map
    for y in range(min(y1, y2), max(y1, y2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

################################
#    Objects and Functions     #
################################
# Definition of living creatures
class Object:
    def __init__(self, x, y, char, name, color, blocks=False, always_visible=False, fighter=None, ai=None, item=None):
        self.x = x
        self.y = y
        self.char = char
        self.name = name
        self.color = color
        self.blocks = blocks
        self.always_visible = always_visible
        self.fighter = fighter
        if self.fighter:
            self.fighter.owner = self
        self.ai = ai
        if self.ai:
            self.ai.owner = self
        self.item = item
        if self.item:
            self.item.owner = self
            

######### Commands living creatures can use #########
    def move(self, dx, dy):
        if not is_blocked(self.x + dx, self.y + dy):
            self.x += dx
            self.y += dy

    def move_towards(self, target_x, target_y):
        #vector from this object to the target, and distance
        dx = target_x - self.x
        dy = target_y - self.y
        distance = math.sqrt(dx ** 2 + dy ** 2)
 
        #normalize it to length 1 (preserving direction), then round it and
        #convert to integer so the movement is restricted to the map grid
        dx = int(round(dx / distance))
        dy = int(round(dy / distance))
        self.move(dx, dy)

    def distance(self, x, y):
        #return the distance to some coordinates
        return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2)

    def distance_to(self, other):
        #return the distance to another object
        dx = other.x - self.x
        dy = other.y - self.y
        return math.sqrt(dx ** 2 + dy ** 2)    
    
    def draw(self):
        # Only show if visible to player
        if libtcod.map_is_in_fov(fov_map, self.x, self.y):
            libtcod.console_set_foreground_color(con, self.color)
            libtcod.console_put_char(con, self.x, self.y, self.char, libtcod.BKGND_NONE)

    def clear(self):
        libtcod.console_put_char(con, self.x, self.y, ' ', libtcod.BKGND_NONE)

    def send_to_back(self):
        # Makes object drawn first, so it get's overwritten when possible
        global objects
        objects.remove(self)
        objects.insert(0, self)

#####################################################
# Check Blocked
def is_blocked(x, y):
    if map[x][y].blocked:
        return True
    for object in objects:
        if object.blocks and object.x == x and object.y == y:
            return True
    return False

# Check for closest monster
def closest_monster(max_range):
    closest_enemy = None
    closest_dist = max_range + 1

    for object in objects:
        if object.fighter and not object == player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
            dist = player.distance_to(object)
            if dist < closest_dist:
                closest_enemy = object
                closest_dist = dist
    return closest_enemy

# Random monster / item generator
def random_choice_index(chances):  #choose one option from list of chances, returning its index
    #the dice will land on some number between 1 and the sum of the chances
    dice = libtcod.random_get_int(0, 1, sum(chances))
 
    #go through all chances, keeping the sum so far
    running_sum = 0
    choice = 0
    for w in chances:
        running_sum += w
 
        #see if the dice landed in the part that corresponds to this choice
        if dice <= running_sum:
            return choice
        choice += 1
 
def random_choice(chances_dict):
    #choose one option from dictionary of chances, returning its key
    chances = chances_dict.values()
    strings = chances_dict.keys()
 
    return strings[random_choice_index(chances)]

def from_dungeon_level(table):
    #returns a value that depends on level. the table specifies what value occurs after each level, default is 0.
    for (value, level) in reversed(table):
        if dungeon_level >= level:
            return value
    return 0

# Decend deeper
def next_level():
    global dungeon_level
    message('After a rare moment of peace, you descend deeper into the heart of the dungeon...', libtcod.red)
    dungeon_level += 1
    make_map()  #create a fresh new level!
    initialize_fov()

# Check for level up
def check_level_up():
    #see if the player's experience is enough to level-up
    level_up_xp = LEVEL_UP_BASE + player.level * LEVEL_UP_FACTOR
    if player.fighter.xp >= level_up_xp:
        #it is! level up
        player.level += 1
        player.fighter.xp -= level_up_xp
        message('Your battle skills grow stronger! You reached level ' + str(player.level) + '!', libtcod.yellow)
        choice = None
        while choice == None:  #keep asking until a choice is made
            choice = menu('Level up! Choose a stat to raise:\n',
                ['Constitution (+20 HP, from ' + str(player.fighter.max_hp) + ')',
                'Strength (+1 attack, from ' + str(player.fighter.power) + ')',
                'Agility (+1 defense, from ' + str(player.fighter.defense) + ')'], LEVEL_SCREEN_WIDTH)
 
        if choice == 0:
            player.fighter.max_hp += 20
            player.fighter.hp += 20
        elif choice == 1:
            player.fighter.power += 1
        elif choice == 2:
            player.fighter.defense += 1

# Mouse-look
def get_names_under_mouse():
    # Get info under mouse
    mouse = libtcod.mouse_get_status()
    (x, y) = (mouse.cx, mouse.cy)
    # List names of objects (under fov)
    names = [obj.name for obj in objects
             if obj.x == x and obj.y == y and libtcod.map_is_in_fov(fov_map, obj.x, obj.y)]
    names = ', '.join(names)
    return names.capitalize()

# Mouse targeting
def target_tile(max_range = None):
#return the position of a tile left-clicked in player's FOV (optionally in a range), or (None,None) if right-clicked.
    while True:
        #render the screen. this erases the inventory and shows the names of objects under the mouse.
        render_all()
        libtcod.console_flush()

        key = libtcod.console_check_for_keypress()
        mouse = libtcod.mouse_get_status()
        (x, y) = (mouse.cx, mouse.cy)
        if (mouse.lbutton_pressed and libtcod.map_is_in_fov(fov_map, x, y) and
            (max_range is None or player.distance(x, y) <= max_range)):
            return (x, y)
        if mouse.rbutton_pressed or key.vk == libtcod.KEY_ESCAPE:
            return (None, None)  #cancel if the player right-clicked or pressed Escape
        #accept the target if the player clicked in FOV, and in case a range is specified, if it's in that range


# Healing
def cast_heal():
    # Heal the player
    if player.fighter.hp == player.fighter.max_hp:
        message('You are already at full health', libtcod.red)
        return 'cancelled'
    else:
        message('Your wounds start to feel better', libtcod.light_violet)
        player.fighter.heal(HEAL_AMOUNT)
# Lightning
def cast_lightning():
    monster = closest_monster(LIGHTNING_RANGE)
    if monster is None:
        message('No enemy is close enough to strike', libtcod.red)
        return 'cancelled'
    else:
        message('A lightning bolt strikes ' + monster.name + ' with a loud thunder', libtcod.light_blue)
        monster.fighter.take_damage(LIGHTNING_DAMAGE)
# Fireball
def cast_fireball():
    #ask the player for a target tile to throw a fireball at
    message('Left-click a target tile for the fireball, or right-click to cancel.', libtcod.light_cyan)
    (x, y) = target_tile()
    if x is None: return 'cancelled'
    message('The fireball explodes, burning everything within ' + str(FIREBALL_RADIUS) + ' tiles!', libtcod.orange)
 
    for obj in objects:  #damage every fighter in range, including the player
        if obj.distance(x, y) <= FIREBALL_RADIUS and obj.fighter:
            obj.fighter.take_damage(FIREBALL_DAMAGE)
        #if obj.distance(x, y) <= FIREBALL_RADIUS and item.
            #[FIX]Need to remove items here

# Small msgbox
def msgbox(text, width=50):
    menu(text, [], width)  #use menu() as a sort of "message box"

# Menu here
def menu (header, options, width, sorting='1'):
    if len(options) > 26: raise ValueError('You cannot have a menu with more than 26 options')
    # Calculate total height for header after autowrap with 1 line per option
    header_height = libtcod.console_height_left_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    height = len(options) + header_height
    # Off console with options view
    window = libtcod.console_new(width, height)
    # Print header with autowrap
    libtcod.console_set_foreground_color(window, libtcod.white)
    libtcod.console_print_left_rect(window, 0, 0, width, height, libtcod.BKGND_NONE, header)
    # Print all the options
    y = header_height
    if header == '':
        header_height = 0
    letter_index = ord(sorting)
    for option_text in options:
        text = '(' + chr(letter_index) + ')' + option_text
        libtcod.console_print_left(window, 0, y, libtcod.BKGND_NONE, text)
        y += 1
        letter_index += 1
    # Blit
    x = SCREEN_WIDTH/2 - width/2
    y = SCREEN_HEIGHT/2 - height/2
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 0.7)
    
    # Wait for keypress
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)
    if key.vk == libtcod.KEY_ENTER and key.lalt:  #(special case) Alt+Enter: toggle fullscreen
        libtcod.console_set_fullscreen(not libtcod.console_is_fullscreen())

    #convert the ASCII code to an index; if it corresponds to an option, return it
    index = key.c - ord(sorting)
    if index >= 0 and index < len(options): return index
    return None

# Inventory
def inventory_menu(header):
    if len(inventory) == 0:
        options = ['Inventory is empty']
    else:
        options = [item.name for item in inventory]
    index = menu(header, options, INVENTORY_WIDTH, 'a')

    if index == None or len(inventory) == 0: return None
    return inventory[index].item

###################################
def place_objects(room):
    #this is where we decide the chance of each monster or item appearing.
 
    #maximum number of monsters per room
    max_monsters = from_dungeon_level([[2, 1], [3, 4], [5, 6]])
 
    #chance of each monster
    monster_chances = {}
    monster_chances['orc'] = 80  #orc always shows up, even if all other monsters have 0 chance
    monster_chances['troll'] = from_dungeon_level([[15, 3], [30, 5], [60, 7]])
 
    #maximum number of items per room
    max_items = from_dungeon_level([[1, 1], [2, 4]])
 
    #chance of each item (by default they have a chance of 0 at level 1, which then goes up)
    item_chances = {}
    item_chances['heal'] = 35  #healing potion always shows up, even if all other items have 0 chance
    item_chances['lightning'] = from_dungeon_level([[25, 4]])
    item_chances['fireball'] =  from_dungeon_level([[25, 6]])
 
    #choose random number of monsters
    num_monsters = libtcod.random_get_int(0, 0, max_monsters)
 
    for i in range(num_monsters):
        #choose random spot for this monster
        x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        y = libtcod.random_get_int(0, room.y1+1, room.y2-1)
 
        #only place it if the tile is not blocked
        if not is_blocked(x, y):
            choice = random_choice(monster_chances)
            if choice == 'orc':
                #create an orc
                fighter_component = Fighter(hp=20, defense=0, power=4, xp=35, death_function=monster_death)
                ai_component = BasicMonster()
 
                monster = Object(x, y, 'o', 'orc', libtcod.desaturated_green,
                    blocks=True, fighter=fighter_component, ai=ai_component)
 
            elif choice == 'troll':
                #create a troll
                fighter_component = Fighter(hp=30, defense=2, power=8, xp=100, death_function=monster_death)
                ai_component = BasicMonster()
 
                monster = Object(x, y, 'T', 'troll', libtcod.darker_green,
                    blocks=True, fighter=fighter_component, ai=ai_component)
 
            objects.append(monster)
 
    #choose random number of items
    num_items = libtcod.random_get_int(0, 0, max_items)
 
    for i in range(num_items):
        #choose random spot for this item
        x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        y = libtcod.random_get_int(0, room.y1+1, room.y2-1)
 
        #only place it if the tile is not blocked
        if not is_blocked(x, y):
            choice = random_choice(item_chances)
            if choice == 'heal':
                #create a healing potion
                item_component = Item(use_function=cast_heal)
                item = Object(x, y, '!', 'healing potion', libtcod.violet, item=item_component)
 
            elif choice == 'lightning':
                #create a lightning bolt scroll
                item_component = Item(use_function=cast_lightning)
                item = Object(x, y, '#', 'scroll of lightning bolt', libtcod.light_yellow, item=item_component)
 
            elif choice == 'fireball':
                #create a fireball scroll
                item_component = Item(use_function=cast_fireball)
                item = Object(x, y, '#', 'scroll of fireball', libtcod.light_yellow, item=item_component)
 
            objects.append(item)
            item.send_to_back()  #items appear below other objects
            item.always_visible = True  #items are visible even out-of-FOV, if in an explored area

######### Creating the map #########
def make_map():
    global map, objects, stairsdown
    objects = [player]

    # Fill map with blocked tiles..
    map = [[ Tile(True)
        for y in range(MAP_HEIGHT) ]
           for x in range(MAP_WIDTH) ]

    # Placing two rooms for testing
#    room1 = Rect(20, 15, 10, 15)
#    room2 = Rect(50, 15, 10, 15)
#    create_room(room1)
#    create_room(room2)

    # Playing a nice hotizontal line
#    create_h_tunnel(25, 55, 23)

    # Placing two blocked places for testing
#    map[30][22].blocked = True
#    map[30][22].block_sight = True
#    map[50][22].blocked = True           
#    map[50][22].block_sight = True

    # Last of all, place the player
#    player.x = 25
#    player.y = 23

    rooms = []
    num_rooms = 0
 
    for r in range(MAX_ROOMS):
        #random width and height
        w = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        h = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        #random position without going out of the boundaries of the map
        x = libtcod.random_get_int(0, 0, MAP_WIDTH - w - 1)
        y = libtcod.random_get_int(0, 0, MAP_HEIGHT - h - 1)
 
        #"Rect" class makes rectangles easier to work with
        new_room = Rect(x, y, w, h)
 
        #run through the other rooms and see if they intersect with this one
        failed = False
        for other_room in rooms:
            if new_room.intersect(other_room):
                failed = True
                break
 
        if not failed:
            #this means there are no intersections, so this room is valid
 
            #"paint" it to the map's tiles
            create_room(new_room)
            
            #add some contents to this room, such as monsters
            place_objects(new_room)
            
            #center coordinates of new room, will be useful later
            (new_x, new_y) = new_room.center()
 
            if num_rooms == 0:
                #this is the first room, where the player starts at
                player.x = new_x
                player.y = new_y
            else:
                #all rooms after the first:
                #connect it to the previous room with a tunnel
 
                #center coordinates of previous room
                (prev_x, prev_y) = rooms[num_rooms-1].center()
 
                #draw a coin (random number that is either 0 or 1)
                if libtcod.random_get_int(0, 0, 1) == 1:
                    #First move horizontally, then vertically
                    create_h_tunnel(prev_x, new_x, prev_y)
                    create_v_tunnel(prev_y, new_y, new_x)
                else:
                    #first move vertically, then horizontally
                    create_v_tunnel(prev_y, new_y, prev_x)
                    create_h_tunnel(prev_x, new_x, new_y)

           #finally, append the new room to the list
            rooms.append(new_room)
            num_rooms += 1
            
    stairsdown = Object(new_x, new_y, '>', 'stairs down', libtcod.white, always_visible=True)
    objects.append(stairsdown)
         
####################################
######### Rendering... #########
def render_all():
    global fov_map, color_dark_wall, color_light_wall
    global color_dark_ground, color_light_ground
    global fov_recompute

    # Recompute FOV
    if fov_recompute:
        #recompute FOV if needed (the player moved or something)
        fov_recompute = False
        libtcod.map_compute_fov(fov_map, player.x, player.y, TORCH_RADIUS, FOV_LIGHT_WALLS, FOV_ALGO)

    # Set background color
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            visible = libtcod.map_is_in_fov(fov_map, x, y)
            wall = map[x][y].block_sight
            if not visible:
                    #it's out of the player's FOV
                if map[x][y].explored:
                    if wall:
                        libtcod.console_set_back(con, x, y, color_dark_wall, libtcod.BKGND_SET)
                    else:
                        libtcod.console_set_back(con, x, y, color_dark_ground, libtcod.BKGND_SET)
            else:
                    #it's visible
                    if wall:
                        libtcod.console_set_back(con, x, y, color_light_wall, libtcod.BKGND_SET )
                    else:
                        libtcod.console_set_back(con, x, y, color_light_ground, libtcod.BKGND_SET )
                        
                    map[x][y].explored = True

    # Draw stuff in list
    for object in objects:
        if object != player:
            object.draw()
        player.draw()

    # Blit is here. Moved stuff from con to root console.
    libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)

##### GUI Part goes here ####
    # Clean up a bit
    libtcod.console_set_background_color(panel, libtcod.black)
    libtcod.console_clear(panel)
    # Show Player stats
    render_bar(1, 1, BAR_WIDTH, 'HP', player.fighter.hp, player.fighter.max_hp, 
               libtcod.red, libtcod.darker_red)
    libtcod.console_print_left(panel, 1, 3, libtcod.BKGND_NONE, dungeon_name + ' lvl ' + str(dungeon_level))
    # Mouse-look
    libtcod.console_set_foreground_color(panel, libtcod.light_gray)
    libtcod.console_print_left(panel, 1, 0, libtcod.BKGND_NONE, get_names_under_mouse())
    # Collect messages and print them
    y = 1
    for (line, color) in game_msgs:
        libtcod.console_set_foreground_color(panel, color)
        libtcod.console_print_left(panel, MSG_X, y, libtcod.BKGND_NONE, line)
        y += 1
    # Blit panel > root console
    libtcod.console_blit(panel, 0, 0, SCREEN_WIDTH, PANEL_HEIGHT, 0, 0, PANEL_Y)
#############################
# Message part
def message (new_msg, color = libtcod.white):
    # Splitting lines if needed
    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)
    for line in new_msg_lines:
        # If buffer is full, remove the first line
        if len(game_msgs) == MSG_HEIGHT:
            del game_msgs[0]
        # Add new line
        game_msgs.append( (line, color) )
################################
# Movement functions
def player_move_or_attack(dx, dy):
    global fov_recompute

    #Check what is there and grep it
    x = player.x + dx
    y = player.y + dy
    target = None
    for object in objects:
        if object.fighter and object.x == x and object.y == y:
            target = object
            break
    if target != None:
        player.fighter.attack(target)
    else:
        player.move(dx, dy)
        fov_recompute = True

######### Key-pressing commands #########
def handle_keys():
    global fov_recompute

    key = libtcod.console_check_for_keypress(libtcod.KEY_PRESSED) # Real-time - for this you also have to change ALL keys to key.vk below!
    #key = libtcod.console_wait_for_keypress(True) # Turn-based
    key_char = chr(key.c)

    if key.vk == libtcod.KEY_ENTER and key_latl:
        # Alt + Enter Fullscreen
        libtcod.console_set_fullscreen (not libtcod.console_is_fullscreen())
    elif key.vk == libtcod.KEY_ESCAPE:
        # Enter = Exit game
        #message('Are you sure you want to quit? (confirm with Y)', libtcod.cyan)
        #if key_char == 'y':
        return 'exit' ## True
    elif key_char == 'c':
        #show character information
        level_up_xp = LEVEL_UP_BASE + player.level * LEVEL_UP_FACTOR
        msgbox('Character Information\n\nLevel: ' + str(player.level) + '\nExperience: ' + str(player.fighter.xp) +
               '\nExperience to level up: ' + str(level_up_xp) + '\n\nMaximum HP: ' + str(player.fighter.max_hp) +
               '\nAttack: ' + str(player.fighter.power) + '\nDefense: ' + str(player.fighter.defense), CHARACTER_SCREEN_WIDTH)
    
    if game_state == 'playing':
        #Movement
        if key.vk == libtcod.KEY_KP9:
            player_move_or_attack(1, -1)
        elif key.vk == libtcod.KEY_KP8 or key.vk == libtcod.KEY_UP:
            player_move_or_attack(0, -1)
        elif key.vk == libtcod.KEY_KP7:
            player_move_or_attack(-1, -1)
        elif key.vk == libtcod.KEY_KP6 or key.vk == libtcod.KEY_RIGHT:
            player_move_or_attack(1, 0)
        elif key.vk == libtcod.KEY_KP5:
            fov_recompute = False
            #player_move_or_attack(0, 0) # This causes player to attack himself
        elif key.vk == libtcod.KEY_KP4 or key.vk == libtcod.KEY_LEFT:
            player_move_or_attack(-1, 0)
        elif key.vk == libtcod.KEY_KP3:
            player_move_or_attack(1, 1)
        elif key.vk == libtcod.KEY_KP2 or key.vk == libtcod.KEY_DOWN:
            player_move_or_attack(0, 1)
        elif key.vk == libtcod.KEY_KP1:
            player_move_or_attack(-1, 1)
        else:
            # Check for other key presses
            if key_char == ',' or key.vk == libtcod.KEY_KP0:
                # Pick up item
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break

            elif key_char == '>':
                if stairsdown.x == player.x and stairsdown.y == player.y:
                    next_level()

            elif key_char == 'd':
                #show the inventory; if an item is selected, drop it
                chosen_item = inventory_menu('Press the key next to an item to drop it, or any other to cancel.\n')
                if chosen_item is not None:
                    chosen_item.drop()

            elif key_char == 'u' or key.vk == libtcod.KEY_KPENTER:
                chosen_item = inventory_menu('Press the key next to an item to use it, or any other to cancel\n')
                if chosen_item is not None:
                    chosen_item.use()
            else:
                return 'didnt_take_turn'
#########################################
######### Death functions #########
# This must be placed after attacks and stuff
def player_death(player):
    global game_state
    message('You have died!', libtcod.red)
    game_state = 'dead'
    player.char = '%'
    player.color = libtcod.dark_red

def monster_death(monster):
    message(monster.name.capitalize() + ' was slain', libtcod.yellow)
    monster.char = '%'
    monster.color = libtcod.dark_red
    monster.blocks = False
    monster.fighter = None
    monster.ai = None
    monster.name = monster.name + ' corpse'
###################################
######### Graphic User Interface #########
# Rendering the GUI
def render_bar(x, y, total_width, name, value, maximum, bar_color, back_color):
    # Calculate bar width..
    bar_width = int(float(value) / maximum * total_width)
    
    # Render background
    libtcod.console_set_background_color(panel, back_color)
    libtcod.console_rect(panel, x, y, total_width, 1, False)
    
    # Now render bar on top
    libtcod.console_set_background_color(panel, bar_color)
    if bar_width > 0:
        libtcod.console_rect(panel, x, y, bar_width, 1, False)

    # Centered text with values
    libtcod.console_set_foreground_color(panel, libtcod.white)
    libtcod.console_print_center(panel, x + total_width / 2, y, libtcod.BKGND_NONE,
                                 name + ': ' + str(value) + '/' + str(maximum))

##########################################
################################
#        Initialisation        #
################################
# Set graphics here
libtcod.console_set_custom_font(FONT, libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_TCOD)
libtcod.console_init_root(SCREEN_WIDTH, SCREEN_HEIGHT, 'Travel!', False)
libtcod.sys_set_fps(LIMIT_FPS)
con = libtcod.console_new(SCREEN_WIDTH, SCREEN_HEIGHT)
panel = libtcod.console_new(SCREEN_WIDTH, PANEL_HEIGHT)

# Set modes here 
def main_menu():
    img = libtcod.image_load('main_menu.png')

    while not libtcod.console_is_window_closed():
        libtcod.image_blit_2x(img, 0, 0, 0)
        
        # Game Menu Options
        #libtcod.console_set_foreground_color(0, libtcod.light_yellow)
        #libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT/2, libtcod.BKGND_NONE, '[S]tart a new game')
        #libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT/2+1, libtcod.BKGND_NONE, '[C]ontinue an old game')
        #libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT/2+2, libtcod.BKGND_NONE, '[Q]uit')
        # Game title and credits
        libtcod.console_set_foreground_color(0, libtcod.dark_red)
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT/2-4, libtcod.BKGND_NONE, 'Travel!')
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT-2, libtcod.BKGND_NONE, 'A python roguelike')
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT-1, libtcod.BKGND_NONE, 'Created by Olle Kvarnstr;m')
        # Print all the options
        choise = menu('', ['Start a new game','Continue last game', 'Quit'], 24)
        if choise == 0:
            new_game()
            play_game()
        elif choise == 1:
            try:
                load_game()
            except:
                msgbox('\n Could not locate savegame.\n', 24)
                continue
            play_game()
        elif choise == 2:
            break

def save_game():
    #open a new empty shelve (possibly overwriting an old one) to write the game data
    file = shelve.open('savegame', 'n')
    file['map'] = map
    file['objects'] = objects
    file['player_index'] = objects.index(player)  #index of player in objects list
    file['inventory'] = inventory
    file['game_msgs'] = game_msgs
    file['game_state'] = game_state
    file['stairs_index'] = objects.index(stairsdown)
    file['dungeon_level'] = dungeon_level
    file['dungeon_name'] = dungeon_name
    file.close()
 
def load_game():
    #open the previously saved shelve and load the game data
    global map, objects, player, inventory, game_msgs, game_state, stairsdown, dungeon_level, dungeon_name
 
    file = shelve.open('savegame', 'r')
    map = file['map']
    objects = file['objects']
    player = objects[file['player_index']]  #get index of player in objects list and access it
    inventory = file['inventory']
    game_msgs = file['game_msgs']
    game_state = file['game_state']
    stairsdown = objects[file['stairs_index']]
    dungeon_level = file['dungeon_level']
    dungeon_name = file['dungeon_name']
    file.close()
 
    initialize_fov()

def new_game():
    global player, inventory, game_msgs, game_state, dungeon_level, dungeon_name
    
    # Add player
    fighter_component = Fighter(hp=30, defense=2, power=5, xp=0, death_function=player_death)
    player = Object(0, 0, '@', 'player', libtcod.white, blocks=True, fighter=fighter_component)
    player.level = 1

    # Generate the map
    dungeon_name = 'Endless stairs'
    dungeon_level = 1
    make_map()
    initialize_fov()

    game_state = 'playing'
    inventory = []
    game_msgs = []

    message('Entering the old cave..', libtcod.red)

def initialize_fov():
    global fov_recompute, fov_map
    fov_recompute = True
    libtcod.console_clear(con)  #unexplored areas start black (which is the default background color)

    fov_map = libtcod.map_new(MAP_WIDTH, MAP_HEIGHT)
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            libtcod.map_set_properties(fov_map, x, y, not map[x][y].block_sight, not map[x][y].blocked)

def play_game():
    player_action = None
    while not libtcod.console_is_window_closed():

        # Render the screen
        render_all()
        libtcod.console_flush()
        check_level_up()
        # Remove all objects before they move
        for object in objects:
            object.clear()

        # Handle keys and exit game if needed
        player_action = handle_keys()
        if player_action == 'exit':
            save_game()
            break

        # Monsters do stuff here
        if game_state == 'playing' and player_action != 'didnt_take_turn':
            for object in objects:
                if object.ai:
                    object.ai.take_turn()
        
main_menu()


