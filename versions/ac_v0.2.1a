#! /usr/bin/env python
################################
#  Initial setup and settings  #
################################
import libtcodpy as libtcod
import math
import textwrap
import shelve
####### GRAPHIC SETTINGS #######
FONT = 'font/arial12x12.png'
#FONT = 'font/arial10x10.png'
LIMIT_FPS = 20 # Max frames per second

# Screen Dimensions
SCREEN_WIDTH = 80
SCREEN_HEIGHT = 50

# Map Dimensions
MAP_WIDTH = 80
MAP_HEIGHT = 42

# GUI Dimensions
BAR_WIDTH = 20
PANEL_HEIGHT = 8
PANEL_Y = SCREEN_HEIGHT - PANEL_HEIGHT

# GUI Message Bar
MSG_X = BAR_WIDTH + 2
MSG_WIDTH = SCREEN_WIDTH - BAR_WIDTH - 2
MSG_HEIGHT = PANEL_HEIGHT - 1

# Level Screen
LEVEL_SCREEN_WIDTH = 40
CHARACTER_SCREEN_WIDTH = 30

# Colors for Building
color_dark_wall = libtcod.dark_grey
color_light_wall = libtcod.desaturated_orange
color_dark_ground = libtcod.grey
color_light_ground = libtcod.desaturated_yellow

################################
###### GAMEPLAY SETTINGS #######
# Dungeon Generator Dimensions
ROOM_MAX_SIZE = 10
ROOM_MIN_SIZE = 6
MAX_ROOMS = 30

# Max in rooms
MAX_ROOM_MONSTERS = 3
MAX_ROOM_ITEMS = 2

# FOV
FOV_ALGO = 0  #default FOV algorithm
FOV_LIGHT_WALLS = True
TORCH_RADIUS = 10

# Inventory
INVENTORY_WIDTH = 50

HEAL_AMOUNT = 40
MANA_RECOVER = 10
HP_RECOVER = 10
recover = 0
LIGHTNING_DAMAGE = 40
LIGHTNING_RANGE = 5
CONFUSE_NUM_TURNS = 10
FIREBALL_RADIUS = 3
FIREBALL_DAMAGE = 25

# Leveling
LEVEL_UP_BASE = 200
LEVEL_UP_FACTOR = 200
# Base 200 + Factor 150 ~> level 12 @ Cave 10


# Basic dices
def dnd_dice(min, max):
    dice = libtcod.random_get_int(0, min, max)
    return dice

target_do = 'no'
#do_blink = 'no'
################################
#   Items, Classes, Monsters   #
################################
### Creatures ###
# Player Classes
class Fighter:
    def __init__(self, hp, STR, DEX, CON, MAG, xp, mp=0, job=None, level=0, death_function=None, 
                 equip_rhand=None, equip_lhand=None, equip_helm=None, equip_armor=None):
        self.max_hp = hp
        self.hp = hp
        self.STR = STR
        self.DEX = DEX
        self.CON = CON
        self.MAG = MAG
        self.xp = xp
        self.max_mp = mp
        self.mp = mp
        self.job = job
        self.level = level
        self.death_function = death_function
        self.equip_rhand = equip_rhand
        if self.equip_rhand == None: self.equip_rhand = empty
        self.equip_lhand = equip_lhand
        if self.equip_lhand == None: self.equip_lhand = empty
        self.equip_helm = equip_helm
        if self.equip_helm == None: self.equip_helm = empty
        self.equip_armor = equip_armor
        if self.equip_armor == None: self.equip_armor = empty

    def attack(self, target):
        #check dmg
        mindmg = self.equip_rhand.item.melee_damage_min
        maxdmg = self.equip_rhand.item.melee_damage_max
        strmod = (self.STR - 10)/2
        #check ac
        dexmod = (target.fighter.DEX - 10)/2
        ac = 10 + target.fighter.equip_armor.item.melee_ac_bonus + dexmod
        #check ab
        if self.DEX > self.STR: ab = (self.DEX - 10)/2
        else: ab = (self.STR - 10)/2
        
        if ab + dnd_dice(1,20) < ac: #check ab vs ac to hit
            message(self.owner.name.capitalize() + ' attacks '+ target.name +' but misses', libtcod.orange)
        else: #if ab >= ac
            damage = dnd_dice(mindmg, maxdmg) + strmod
            if damage > 0:
                message(self.owner.name.capitalize() + ' damages ' + target.name + '(' + str(damage) + ' damage)', libtcod.orange)
                target.fighter.take_damage(damage)
            else:
                message(self.owner.name.capitalize() + ' attacks ' + target.name + ' but was unable to cause any damage', libtcod.orange)

    def take_damage(self, damage):
        if damage > 0:
            self.hp -= damage
            if self.hp <= 0:
                function = self.death_function
                if function is not None:
                    function(self.owner)
                if self.owner != player:
                    player.fighter.xp += self.xp

    def heal(self, amount):
        self.hp += amount
        if self.hp > self.max_hp:
            self.hp = self.max_hp


# Monster Classes
class BasicMonster:
    def __init__(self, state='normal', chasing_x=None, chasing_y=None):
        # I think this is needed for the AI chasing to work..
        self.state = state
        self.chasing_x = chasing_x
        self.chasing_y = chasing_y
    def take_turn(self):
        #Basic monster AI = if you can see it, it can see you
        # If player disappears, to go last known location
        monster = self.owner
        if libtcod.map_is_in_fov(fov_map, monster.x, monster.y):
            self.chasing_x = player.x
            self.chasing_y = player.y
            self.state = 'chasing'
            # If not close, move towards player
            if monster.distance_to(player) >= 2:
                monster.move_towards(player.x, player.y)
            # If close, attack! (if alive)
            elif player.fighter.hp > 0:
                monster.fighter.attack(player)
        else:
            if self.state == 'chasing':
                if monster.x == self.chasing_x and monster.y == self.chasing_y:
                    self.state = 'normal'
                    y = dnd_dice(-1, 1)
                    x = dnd_dice(-1, 1)
                    monster.move(x, y)
                else: monster.move_towards(self.chasing_x, self.chasing_y)
            else:
                y = dnd_dice(-1, 1)
                x = dnd_dice(-1, 1)
                monster.move(x, y)
#################
### Items ###
class Item:
    def __init__(self, use_function = None, isweapon='no',weapon_hand='none', ishelm='no', isarmor='no',
                 melee_damage_min=None, melee_damage_max=None, melee_ac_bonus=0):
        self.use_function = use_function
        self.isweapon = isweapon
        self.weapon_hand = weapon_hand
        self.ishelm = ishelm
        self.isarmor = isarmor
        self.melee_damage_min = melee_damage_min
        self.melee_damage_max = melee_damage_max
        self.melee_ac_bonus = melee_ac_bonus

    def equip(self, weapon_hand='none'):
        self.weapon_hand = weapon_hand
        if self.isweapon == 'one' and weapon_hand != 'none':
            if weapon_hand == 'right':
                if player.fighter.equip_rhand.name == '':
                    player.fighter.equip_rhand = self.owner
                    player.inventory.remove(self.owner)
                    message('Equipped ' + self.owner.name + ' to the right hand')
                else: message('You already have an item equipped in your right hand')
            elif weapon_hand == 'left':                
                if player.fighter.equip_lhand.name =='':
                    player.fighter.equip_lhand = self.owner
                    player.inventory.remove(self.owner)
                    message('Equipped ' + self.owner.name + ' to the left hand')
                else: message('You already have an item equipped in your left hand')
            else: message('No weapon hand set! This is a bug', libtcod.pink)
        elif self.ishelm == 'yes':
            if player.fighter.equip_helm.name == '':        
                player.fighter.equip_helm = self.owner
                player.inventory.remove(self.owner)
                message('Equipped ' + self.owner.name)
            else: message('You already have a helmet equipped')
        elif self.isarmor == 'yes':
            if player.fighter.equip_armor.name == '':        
                player.fighter.equip_armor = self.owner
                player.inventory.remove(self.owner)
                message('Equipped ' + self.owner.name)
            else: message('You already have an armor equipped')
        else:
            message(self.owner.name + ' cannot be equipped')

    def use(self):
        if self.use_function == None:
            message ('The ' + self.owner.name + ' cannot be used')
        else:
            self.use_function()
#            if self.use_function() != 'cancelled' or self.use_function() != 'magic':
#                player.inventory.remove(self.owner)

    def pick_up(self, looted='no'):
        self.looted = looted
        # Add to inventory, remove from map
        if len(player.inventory) >= 26:
            message('Your inventory is full!')
        else:
            player.inventory.append(self.owner)
            if looted == 'no':
                objects.remove(self.owner)
            message ('Picked up ' + self.owner.name, libtcod.green)

    def drop(self):
        objects.append(self.owner)
        player.inventory.remove(self.owner)
        self.owner.x = player.x
        self.owner.y = player.y
        message('You drop ' + self.owner.name, libtcod.yellow)

################################
#           Building           #
################################
######### Initial definitions #########
# Tiles
class Tile:
    def __init__(self, blocked, block_sight = None):
        self.blocked = blocked

        # All lines start unexplored
        self.explored = False
#        self.explored = True #[GM]
        
        # By default, blocked tile blocks sight
        if block_sight is None: block_sight = blocked
        self.block_sight = block_sight

# Rectangles for rooms and structures
class Rect:
    def __init__(self, x, y, w, h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h

    def center(self):
        center_x = (self.x1 + self.x2) / 2
        center_y = (self.y1 + self.y2) / 2
        return (center_x, center_y)
 
    def intersect(self, other):
        #returns true if this rectangle intersects with another one
        return (self.x1 <= other.x2 and self.x2 >= other.x1 and
                self.y1 <= other.y2 and self.y2 >= other.y1)
######### Functions for mapmaking ######### 
# Rooms
def create_room(room):
    global map
    #go through the tiles in the rectangle and make them passable    
    for x in range(room.x1 + 1, room.x2):
        for y in range(room.y1 + 1, room.y2):
            map[x][y].blocked = False
            map[x][y].block_sight = False

# Tunnel / Horisontal
def create_h_tunnel(x1, x2, y):
    global map
    #horizontal tunnel. min() and max() are used in case x1>x2
    for x in range(min(x1, x2), max(x1, x2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

# Tunnel / Vertical
def create_v_tunnel(y1, y2, x):
    global map
    for y in range(min(y1, y2), max(y1, y2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

################################
#    Objects and Functions     #
################################
# Definition of living creatures
class Object:
    def __init__(self, x, y, char, name, color, race=None, blocks=False, lootable='no',
                 always_visible=False, inventory=None, spellbook=None, fighter=None, ai=None, item=None): #[GM]
        self.x = x
        self.y = y
        self.char = char
        self.name = name
        self.color = color
        self.race = race
        self.lootable = lootable
        self.blocks = blocks
        self.always_visible = always_visible
        self.inventory = inventory
        self.spellbook = spellbook
        self.fighter = fighter
        if self.fighter:
            self.fighter.owner = self
        self.ai = ai
        if self.ai:
            self.ai.owner = self
        self.item = item
        if self.item:
            self.item.owner = self
            

######### Commands living creatures can use #########
    def move(self, dx, dy):
        if not is_blocked(self.x + dx, self.y + dy):
            self.x += dx
            self.y += dy

    def move_towards(self, target_x, target_y):
        #vector from this object to the target, and distance
        dx = target_x - self.x
        dy = target_y - self.y
        distance = math.sqrt(dx ** 2 + dy ** 2)
 
        #normalize it to length 1 (preserving direction), then round it and
        #convert to integer so the movement is restricted to the map grid
        dx = int(round(dx / distance))
        dy = int(round(dy / distance))
        # If blocked, let's try something else
        if not is_blocked(self.x + dx, self.y + dy):
            self.move(dx, dy)
        else:
            if self.x + 1 == target_x:
                dx = 1
            if self.x - 1 == target_x:
                dx = -1
            if self.y + 1 == target_y:
                dy = 1
            if self.y - 1 == target_y:
                dy = -1
            self.move(dx, dy)
            
    def distance(self, x, y):
        #return the distance to some coordinates
        return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2)

    def distance_to(self, other):
        #return the distance to another object
        dx = other.x - self.x
        dy = other.y - self.y
        return math.sqrt(dx ** 2 + dy ** 2)    

    def display_inventory(self, header):
        if len(self.inventory) == 0:
            options = [self.name + 's inventory is empty']
        else:
            options = [item.name for item in self.inventory]
        index = menu(header, options, INVENTORY_WIDTH, 'a')
            
        if index == None or len(self.inventory) == 0: return None
        return self.inventory[index].item

    def draw(self):
        #only show if it's visible to the player; or it's set to "always visible" and on an explored tile
        if (libtcod.map_is_in_fov(fov_map, self.x, self.y) or
            (self.always_visible and map[self.x][self.y].explored)):
            #set the color and then draw the character that represents this object at its position
            libtcod.console_set_foreground_color(con, self.color)
            libtcod.console_put_char(con, self.x, self.y, self.char, libtcod.BKGND_NONE)

    def clear(self):
        libtcod.console_put_char(con, self.x, self.y, ' ', libtcod.BKGND_NONE)

    def send_to_back(self):
        # Makes object drawn first, so it get's overwritten when possible
        global objects
        objects.remove(self)
        objects.insert(0, self)

#####################################################
# Check Blocked
def is_blocked(x, y):
    if map[x][y].blocked:
        return True
    for object in objects:
        if object.blocks and object.x == x and object.y == y:
            return True
    return False

# Check for closest monster
def closest_monster(max_range):
    closest_enemy = None
    closest_dist = max_range + 1

    for object in objects:
        if object.fighter and not object == player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
            dist = player.distance_to(object)
            if dist < closest_dist:
                closest_enemy = object
                closest_dist = dist
    return closest_enemy

# Random monster / item generator
def random_choice_index(chances):  #choose one option from list of chances, returning its index
    #the dice will land on some number between 1 and the sum of the chances
    dice = libtcod.random_get_int(0, 1, sum(chances))
 
    #go through all chances, keeping the sum so far
    running_sum = 0
    choice = 0
    for w in chances:
        running_sum += w
 
        #See if the dice landed in the part that corresponds to this choice
        if dice <= running_sum:
            return choice
        choice += 1
 
def random_choice(chances_dict):
    #choose one option from dictionary of chances, returning its key
    chances = chances_dict.values()
    strings = chances_dict.keys()
 
    return strings[random_choice_index(chances)]

def from_dungeon_level(table):
    #returns a value that depends on level. the table specifies what value occurs after each level, default is 0.
    for (value, level) in reversed(table):
        if dungeon_level >= level:
            return value
    return 0

# Decend deeper
def next_level():
    global dungeon_level
   
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1:
        message('You descend deeper...', libtcod.red)
        dungeon_level += 1
        make_map_cave()  #create a fresh new level!
        initialize_fov()
    else: message('You cannot go further down at the moment...')

# Check for level up
def check_level_up():
    level_up_xp = LEVEL_UP_BASE + player.fighter.level * LEVEL_UP_FACTOR
    if player.fighter.xp >= level_up_xp:
        player.fighter.level += 1
        player.fighter.xp -= level_up_xp
        message('Your battle skills grow stronger! You reached level ' + str(player.fighter.level) + '!', libtcod.yellow)
        if player.fighter.job == 'mage': 
            hpup = dnd_dice(1,6) 
            mpup = dnd_dice(1,10)
        elif player.fighter.job == 'rogue': 
            hpup = dnd_dice(1,8) 
            mpup = dnd_dice(1,6)
        elif player.fighter.job == 'fighter': 
            hpup = dnd_dice(1,10)
            mpup = 0
        player.fighter.max_hp += hpup
        player.fighter.hp += hpup
        player.fighter.max_mp += mpup
        player.fighter.mp += mpup
        if player.race == 'dwarf': player.fighter.max_mp = 0
        if player.fighter.mp > player.fighter.max_mp: player.fighter.mp = player.fighter.max_mp
#        if (player.fighter.level == 4 or 8 or 12 or 16 or 20):
        if player.fighter.level in (4, 8, 12, 16, 20):
            choice = None
            while choice == None:
                choice = menu('Level up! Choose a stat to raise:\n',
                              ['+1 Strength, currently ' + str(player.fighter.STR),
                               '+1 Dexterity, currently ' + str(player.fighter.DEX),
                               '+1 Constitution, currently ' + str(player.fighter.CON),
                               '+1 Magic, currently ' + str(player.fighter.MAG)], LEVEL_SCREEN_WIDTH,'a')
                if choice == 0:
                    player.fighter.STR += 1
                elif choice == 1:
                    player.fighter.DEX += 1
                elif choice == 2:
                    player.fighter.CON += 1
                elif choice == 3:
                    player.fighter.MAG += 1

#Normal targeting.. Basically, targeting = on
def target_tile(focus):
    global game_state, xy_tile
    x = focus.x
    y = focus.y
    xy_tile = Object(x, y, 'X', 'targeting', libtcod.red)
    objects.append(xy_tile)
    game_state = 'targeting'

# Targeting-lookup
def targeting_info():
    if game_state == 'targeting': target = xy_tile
    else: target = player

    names = [obj.name for obj in objects
             if obj.x == target.x and obj.y == target.y and obj != target]
    names = ', '.join(names)
    return names.capitalize()
##### SPELLS/*
def cast_blink(): #BLINK
    global target_do
    if player.fighter.mp >= 10:
        target_do = 'blink'
        target_tile(focus=player)
        return 'magic'
    else:
        message('Not enough mana!',libtcod.red)
        return 'cancelled'
def do_blink(x, y):
    if not is_blocked(x, y):
        player.x = x
        player.y = y
        player.fighter.mp -= 10
        fov_recompute = True
        target_do = 'no'
    else: 
        message ('You cannot blink to that location')
        target_do = 'no'
        return 'didnt_take_turn'

def cast_magic_missile(): #MAGICMISSILE
    global target_do
    if player.fighter.mp >= 2:
        enemy = closest_monster(15)
        if enemy == None: enemy = player
        target_do = 'magic_missile'
        target_tile(focus=enemy)
        return 'magic'
    else:
        message('Not enough mana!',libtcod.red)
        return 'cancelled'
def do_magic_missile(x, y):
    ma = dnd_dice(1,4) + 1
    mb = dnd_dice(1,4) + 1
    mc = dnd_dice(1,4) + 1
    md = dnd_dice(1,4) + 1
    me = dnd_dice(1,4) + 1
    for object in objects:
        if object.x == x and object.y == y and object.fighter:
            if player.fighter.level == 1 or 2: # 1 missile                
                message('Magic missile hits ' + object.name + ' for ' + str(ma) + ' damage.',libtcod.orange)
                object.fighter.take_damage(ma)
            elif player.fighter.level == 3 or 4: # 2 missile
                dmg = ma + mb
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            elif player.fighter.level == 5 or 6: # 3 missile
                dmg = ma + mb + mc
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            elif player.fighter.level == 7 or 8: # 4 missile
                dmg = ma + mb + mc + md
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            elif player.fighter.level >= 9: # 5 missile
                dmg = ma + mb + mc + md + me
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            target_do = 'no'
            player.fighter.mp -= 2
    else: 
#        message ('No target')
        target_do = 'no'
        return 'didnt_take_turn'
                

def cast_heal(): #HEAL
    # Heal the player
    if player.fighter.hp == player.fighter.max_hp:
        message('You are already at full health', libtcod.red)
        return 'cancelled'
    else:
        message('Your wounds start to feel better', libtcod.light_violet)
        player.fighter.heal(HEAL_AMOUNT)
        return 'magic'

def cast_lightning(): #LIGHTNING
    monster = closest_monster(LIGHTNING_RANGE)
    if monster is None:
        message('No enemy is close enough to strike', libtcod.red)
        return 'cancelled'
    else:
        message('A lightning bolt strikes ' + monster.name + ' with a loud thunder', libtcod.light_blue)
        monster.fighter.take_damage(LIGHTNING_DAMAGE)
        return 'magic'

#####*/SPELLS
# Small msgbox from menu command
def msgbox(text, width=50, color=libtcod.white):
    menu(text, [], width, color=color)

# Menu here
def menu (header, options, width, sorting='1', transparency='0.7', color=libtcod.white):
    if len(options) > 26: raise ValueError('You cannot have a menu with more than 26 options')
    # Calculate total height for header after autowrap with 1 line per option
    header_height = libtcod.console_height_left_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    height = len(options) + header_height
    # Off console with options view
    window = libtcod.console_new(width, height)
    # Print header with autowrap
    libtcod.console_set_foreground_color(window, color)
    libtcod.console_print_left_rect(window, 0, 0, width, height, libtcod.BKGND_NONE, header)
    # Print all the options
    y = header_height
    if header == '':
        header_height = 0
    letter_index = ord(sorting)
    for option_text in options:
        text = '(' + chr(letter_index) + ')' + option_text
        libtcod.console_print_left(window, 0, y, libtcod.BKGND_NONE, text)
        y += 1
        letter_index += 1
    # Blit
    x = SCREEN_WIDTH/2 - width/2
    y = SCREEN_HEIGHT/2 - height/2
#    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 0.7)
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, float(transparency))
    # Wait for keypress
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)
    if key.vk == libtcod.KEY_ENTER and key.lalt:  #(special case) Alt+Enter: toggle fullscreen
        libtcod.console_set_fullscreen(not libtcod.console_is_fullscreen())

    #convert the ASCII code to an index; if it corresponds to an option, return it
    index = key.c - ord(sorting)
    if index >= 0 and index < len(options): return index
    return None

def remove_item():
    item_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=2)
    empty = Object(0, 0, '/', '', libtcod.dark_grey, item=item_component)
    choice = None
    while choice == None:  #keep asking until a choice is made
        choice = menu('Which item do you want to remove?\n',
                      ['Helm: ' + player.fighter.equip_helm.name + '\n',
                       'Armor: ' + player.fighter.equip_armor.name + '\n',
                       'R Hand: ' + player.fighter.equip_rhand.name + '\n',
                       'L Hand: ' + player.fighter.equip_lhand.name + '\n'], LEVEL_SCREEN_WIDTH)
        if choice == 0:
            if player.fighter.equip_helm.name == '':
                message('You have no helmet to remove')
            else:
                message('Unequipped ' + player.fighter.equip_helm.name)
                player.inventory.append(player.fighter.equip_helm)
                player.fighter.equip_helm = empty
        if choice == 1:
            if player.fighter.equip_armor.name == '':
                message('You have no armor to remove')
            else:
                message('Unequipped ' + player.fighter.equip_armor.name)
                player.inventory.append(player.fighter.equip_armor)
                player.fighter.equip_armor = empty
        if choice == 2:
            if player.fighter.equip_rhand.name == '':
                message('Your right hand is empty')
            else:
                message('Unequipped ' + player.fighter.equip_rhand.name + ' from right hand')
                player.inventory.append(player.fighter.equip_rhand)
                player.fighter.equip_rhand = empty
        if choice == 3:
            if player.fighter.equip_lhand.name == '':
                message('Your left hand is empty')
            else:
                message('Unequipped ' + player.fighter.equip_lhand.name + ' from left hand')
                player.inventory.append(player.fighter.equip_lhand)
                player.fighter.equip_lhand = empty

# Inventory
def inventory_menu(header):
    if len(player.inventory) == 0:
        options = ['Inventory is empty']
    else:
        options = [item.name for item in player.inventory]
    index = menu(header, options, INVENTORY_WIDTH, 'a')

    if index == None or len(player.inventory) == 0: return None
    return player.inventory[index].item
# Spellbook
def magic_menu(header):
    if len(player.spellbook) == 0:
        message ('You know no magic')
        return None
    else:
        options = [item.name for item in player.spellbook]
    index = menu(header, options, INVENTORY_WIDTH, '1')

    if index == None or len(player.spellbook) == 0: return None
    return player.spellbook[index].item
############
# Create new player
def new_player(player_race, player_class):
    global player, empty
#    self.player_race = player_race
#    self.player_class = player_class
    # Defines, oh defines
    empty_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=2)
    empty = Object(0, 0, '/', '', libtcod.dark_grey, item=empty_component)
    shortsword_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=6)
    shortsword = Object(0, 0, '', 'shortsword', libtcod.dark_grey, item=shortsword_component)
    longsword_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=8)
    longsword = Object(0, 0, '', 'longsword', libtcod.dark_grey, item=longsword_component)
    cloak_component = Item(melee_ac_bonus=2)
    cloak = Object(0, 0, '(', 'Cloak', libtcod.darker_green, item=cloak_component)
    leather_armor_component = Item(melee_ac_bonus=4)
    leather_armor = Object(0, 0, '[', 'leather armor', libtcod.darker_orange, item=leather_armor_component)
    chainmail_component = Item(melee_ac_bonus=6)
    chainmail = Object(0, 0, '[', 'chainmail', libtcod.dark_grey, item=chainmail_component)
    blink_component = Item(use_function=cast_blink)
    blink = Object(0, 0, '', 'blink (10 mana)', libtcod.dark_grey, item=blink_component)
    magic_missile_component = Item(use_function=cast_magic_missile)
    magic_missile = Object(0, 0, '', 'magic missile (2 mana)', libtcod.dark_grey, item=magic_missile_component)
    human_component = Fighter(hp=20, STR=10, DEX=10, CON=10, MAG=10, xp=0, mp=0, job=player_class, level=1, death_function=player_death)
    elf_component = Fighter(hp=16, STR=8, DEX=12, CON=8, MAG=12, xp=0, mp=0, job=player_class,level=1, death_function=player_death)
    gnome_component = Fighter(hp=18, STR=9, DEX=11, CON=9, MAG=11, xp=0, mp=0, job=player_class,level=1, death_function=player_death)
    dwarf_component = Fighter(hp=24, STR=12, DEX=8, CON=12, MAG=0, xp=0, mp=0, job=player_class,level=1, death_function=player_death)
    if player_race == 'human': player_component = human_component
    elif player_race == 'elf': player_component = elf_component
    elif player_race == 'gnome': player_component = gnome_component
    elif player_race == 'dwarf': player_component = dwarf_component
    player_inventory = []
    player_spellbook = []
    # Done with defines
    player = Object(0, 0, '@', 'player', libtcod.white, race=player_race, 
                    blocks=True, inventory=player_inventory, spellbook=player_spellbook, fighter=player_component)
    if player_class == 'fighter':
        player.fighter.max_hp = 10
        player.fighter.hp = 10
        player.fighter.equip_armor = chainmail
        player.fighter.equip_rhand = shortsword
    if player_class == 'rogue':
        player.fighter.max_hp = 8
        player.fighter.hp = 8
        if player_race == 'dwarf':
            player.fighter.max_mp = 0
            player.fighter.mp = 0
        else:
            player.fighter.max_mp = 6
            player.fighter.mp = 6
        player.fighter.equip_armor = leather_armor
        player.fighter.equip_rhand = shortsword
    if player_class == 'mage':
        player.fighter.max_hp = 6
        player.fighter.hp = 6
        player.fighter.max_mp = 10
        player.fighter.mp = 10
        #player.fighter.equip_rhand = staff
        player.fighter.equip_armor = cloak
        player.spellbook.append(magic_missile)

##################################
def place_objects(room):
    
    #maximum number of monsters per room
    max_monsters = from_dungeon_level([[2, 1], [3, 4], [5, 6]])
 
    #chance of each monster
    monster_chances = {}
    monster_chances['goblin'] = 80  #goblin always shows up, even if all other monsters have 0 chance
    monster_chances['troll'] = from_dungeon_level([[15, 3], [30, 5], [60, 7]])
 
    #choose random number of monsters
    num_monsters = libtcod.random_get_int(0, 0, max_monsters)
 
    for i in range(num_monsters):
        #choose random spot for this monster
        x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        y = libtcod.random_get_int(0, room.y1+1, room.y2-1)
 
        #only place it if the tile is not blocked
        if not is_blocked(x, y):
            choice = random_choice(monster_chances)
            if choice == 'goblin':
####            #DEFINE GOBLIN/*
                monster_inventory = []
                empty_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=2)
                empty = Object(0, 0, '/', '', libtcod.dark_grey, item=empty_component)
                item_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=6)
                item = Object(x, y, '/', 'shortsword', libtcod.dark_grey, item=item_component)
                fighter_component = Fighter(hp=4, STR=8, DEX=8, CON=11, MAG=0, xp=35,level=1, death_function=monster_death)
                ai_component = BasicMonster()
                monster = Object(x, y, 'g', 'goblin', libtcod.yellow, blocks=True, inventory=monster_inventory, fighter=fighter_component, ai=ai_component)
#                monster.fighter.equip_helm = empty
#                monster.fighter.equip_armor = empty
                monster.fighter.equip_rhand = item
                if dnd_dice(1, 5) == 1:
                    item_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=4)
                    item = Object(x, y, '/', 'dagger', libtcod.dark_grey, item=item_component)
                    monster.fighter.equip_lhand = item
#                else: monster.fighter.equip_lhand = empty
###             *\DEFINE GOBLIN#
###             #DEFINE TROLL/*
            elif choice == 'troll':
                #create a troll
                monster_inventory = []
                empty_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=2)
                empty = Object(0, 0, '/', '', libtcod.dark_grey, item=empty_component)
                fighter_component = Fighter(hp=30, STR=14, DEX=6, CON=14, MAG=0, xp=100, death_function=monster_death)
                ai_component = BasicMonster()
                monster = Object(x, y, 'T', 'troll', libtcod.darker_green,
                                 blocks=True, inventory=monster_inventory, fighter=fighter_component, ai=ai_component)
#                monster.fighter.equip_helm = empty
#                monster.fighter.equip_armor = empty
#                monster.fighter.equip_rhand = empty
#                monster.fighter.equip_lhand = empty

 ###            *\DEFINE TROLL#
            objects.append(monster)
#################################### 
######### Creating the map #########
#################################### 
##### Cave map
def make_map_cave():
    global map, objects, stairsdown, portal
    objects = [player]

    # Fill map with blocked tiles..
    map = [[ Tile(True)
        for y in range(MAP_HEIGHT) ]
           for x in range(MAP_WIDTH) ]
    rooms = []
    num_rooms = 0
    for r in range(MAX_ROOMS):
        #random width and height
        w = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        h = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        #random position without going out of the boundaries of the map
        x = libtcod.random_get_int(0, 0, MAP_WIDTH - w - 1)
        y = libtcod.random_get_int(0, 0, MAP_HEIGHT - h - 2) #changed this to 2, because there seems to be some issues..
         #"Rect" class makes rectangles easier to work with
        new_room = Rect(x, y, w, h)
         #run through the other rooms and see if they intersect with this one
        failed = False
        for other_room in rooms:
            if new_room.intersect(other_room):
                failed = True
                break
        if not failed:
            #this means there are no intersections, so this room is valid
             #"paint" it to the map's tiles
            create_room(new_room)
             #add some contents to this room, such as monsters
            place_objects(new_room)
             #center coordinates of new room, will be useful later
            (new_x, new_y) = new_room.center()
            if num_rooms == 0:
                #this is the first room, where the player starts at
                player.x = new_x
                player.y = new_y
            else:
                #all rooms after the first:
                #connect it to the previous room with a tunnel
                 #center coordinates of previous room
                (prev_x, prev_y) = rooms[num_rooms-1].center()
                 #draw a coin (random number that is either 0 or 1)
                if libtcod.random_get_int(0, 0, 1) == 1:
                    #First move horizontally, then vertically
                    create_h_tunnel(prev_x, new_x, prev_y)
                    create_v_tunnel(prev_y, new_y, new_x)
                else:
                    #first move vertically, then horizontally
                    create_v_tunnel(prev_y, new_y, prev_x)
                    create_h_tunnel(prev_x, new_x, new_y)
           #finally, append the new room to the list
            rooms.append(new_room)
            num_rooms += 1
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1: #Make stairs down until level 10..            
        stairsdown = Object(new_x, new_y, '>', 'stairs going down', libtcod.white, always_visible=True)
        objects.append(stairsdown)
        stairsdown.always_visible = True  #items are visible even out-of-FOV, if in an explored area
    if dungeon_name == 'Cave' and dungeon_level == 10: #Make a tunnel to the village
        x = dnd_dice(10, 70)
        y = 0
        Tunnel = False
        while Tunnel == False:
            if is_blocked(x, y):
                map[x][y].blocked = False 
                map[x][y].block_sight = False
                y += 1
            else: 
                Tunnel = True

##### Village
def make_map_village():
    global map, objects
    objects = [player]
    player.x = MAP_WIDTH/2
    player.y = 41

    allx = range(MAP_WIDTH)
    ally = range(MAP_HEIGHT)

    map = [[ Tile(True)
             for y in range(MAP_HEIGHT) ]
           for x in range(MAP_WIDTH) ]
#    create_v_tunnel(y1,y2,x)
    create_v_tunnel(30,41,40)
    create_v_tunnel(30,35,41)
    create_v_tunnel(30,35,39)
    create_v_tunnel(31,34,38)
    create_v_tunnel(0,41,0)
    create_v_tunnel(0,41,79)
    create_h_tunnel(0,79,0)
    create_h_tunnel(0,79,41)


####################################
######### Rendering... #########
def render_all():
    global fov_map, color_dark_wall, color_light_wall
    global color_dark_ground, color_light_ground
    global fov_recompute

    # Recompute FOV
    if fov_recompute:
        #recompute FOV if needed (the player moved or something)
        fov_recompute = False
        libtcod.map_compute_fov(fov_map, player.x, player.y, TORCH_RADIUS, FOV_LIGHT_WALLS, FOV_ALGO)

    # Set background color
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            visible = libtcod.map_is_in_fov(fov_map, x, y)
            wall = map[x][y].block_sight
            if not visible:
                    #it's out of the player's FOV
                if map[x][y].explored:
                    if wall: libtcod.console_set_back(con, x, y, color_dark_wall, libtcod.BKGND_SET)
                    else: libtcod.console_set_back(con, x, y, color_dark_ground, libtcod.BKGND_SET)
            else:
                    #it's visible
                    if wall: libtcod.console_set_back(con, x, y, color_light_wall, libtcod.BKGND_SET )
                    else: libtcod.console_set_back(con, x, y, color_light_ground, libtcod.BKGND_SET )                        
                    map[x][y].explored = True

    # Draw stuff in list
    for object in objects:
        if object != player:
            object.draw()
        player.draw()

    # Blit is here. Moved stuff from con to root console.
    libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)

##### GUI Part goes here ####
    # Clean up a bit
    libtcod.console_set_background_color(panel, libtcod.black)
    libtcod.console_clear(panel)
    # Show Player stats
    render_bar(1, 1, BAR_WIDTH, 'Health', player.fighter.hp, player.fighter.max_hp, 
               libtcod.red, libtcod.darker_red)
    if player.fighter.max_mp != 0:
        render_bar(1, 3, BAR_WIDTH, 'Mana', player.fighter.mp, player.fighter.max_mp,
                   libtcod.blue, libtcod.darker_blue)
        # Showing level name, two options here...
    if dungeon_level > 0: libtcod.console_print_left(panel, 1, 5, libtcod.BKGND_NONE, dungeon_name + ' lvl ' + str(dungeon_level))
    else: libtcod.console_print_left(panel, 1, 5, libtcod.BKGND_NONE, dungeon_name)
    # "look" info here. Either targeting or "You are standing on..."
    libtcod.console_set_foreground_color(panel, libtcod.light_gray)
    libtcod.console_print_left(panel, 1, 0, libtcod.BKGND_NONE, targeting_info())
    # Collect messages and print them
    y = 1
    for (line, color) in game_msgs:
        libtcod.console_set_foreground_color(panel, color)
        libtcod.console_print_left(panel, MSG_X, y, libtcod.BKGND_NONE, line)
        y += 1
    # Blit panel > root console
    libtcod.console_blit(panel, 0, 0, SCREEN_WIDTH, PANEL_HEIGHT, 0, 0, PANEL_Y)
#############################
# Message part
def message (new_msg, color = libtcod.white):
    # Splitting lines if needed
    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)
    for line in new_msg_lines:
        # If buffer is full, remove the first line
        if len(game_msgs) == MSG_HEIGHT:
            del game_msgs[0]
        # Add new line
        game_msgs.append( (line, color) )
################################
# Movement functions
def player_move_or_attack(dx, dy):
    global fov_recompute, targeted_tile

    #Check what is there and grep it
    x = player.x + dx
    y = player.y + dy
    target = None
    for object in objects:
        if object.fighter and object.x == x and object.y == y:
            target = object
            break
    if target != None:
        player.fighter.attack(target)
    else:
        player.move(dx, dy)
        fov_recompute = True

######### Key-pressing commands #########
def handle_keys():
    global fov_recompute, game_state, target_do

    key = libtcod.console_check_for_keypress(libtcod.KEY_PRESSED) # Real-time - for this you also have to change ALL keys to key.vk below!
    #key = libtcod.console_wait_for_keypress(True) # Turn-based
    key_char = chr(key.c)

    if key.vk == libtcod.KEY_ENTER and key.lalt:  #(special case) Alt+Enter: toggle fullscreen
        # Alt + Enter Fullscreen [FIX] - this crashes game
        libtcod.console_set_fullscreen (not libtcod.console_is_fullscreen())
    elif key.vk == libtcod.KEY_ESCAPE and game_state != 'targeting':
        # Enter = Exit game
        return 'exit' ## True

    elif key_char == 'p': player.fighter.xp = player.fighter.xp + 100

    elif key_char == 'r': remove_item()

    elif key_char == 's':
        #show character information. 1:DEFINES
        level_up_xp = LEVEL_UP_BASE + player.fighter.level * LEVEL_UP_FACTOR
        helm = player.fighter.equip_helm.name
        armor = player.fighter.equip_armor.name
        rhand = player.fighter.equip_rhand.name
        lhand = player.fighter.equip_lhand.name

        # 2. PRINT IT OUT
        msgbox('Character Information\n\nLevel: ' + str(player.fighter.level) + 
               ' - XP: ' + str(player.fighter.xp) + '/' + str(level_up_xp) + 
               '\n\nRace/Class:  ' + player.race.capitalize() + ' ' + player.fighter.job.capitalize() +
               '\n\nStrength:     ' + str(player.fighter.STR) + '\nDexterity:    ' + str(player.fighter.DEX) + 
               '\nConstitution: ' + str(player.fighter.CON) + '\nMagic:        ' + str(player.fighter.MAG) +
               '\n\nHelm:   ' + str(helm) + '\nArmor:  ' + str(armor) + '\nR Hand: ' + str(rhand) + '\nL Hand: ' + str(lhand)
               , CHARACTER_SCREEN_WIDTH,libtcod.orange)

        #####
    if game_state == 'playing':
        #Movement
        if key.vk == libtcod.KEY_KP9:
            player_move_or_attack(1, -1)
        elif key.vk == libtcod.KEY_KP8 or key.vk == libtcod.KEY_UP:
            if dungeon_name == 'Cave' and dungeon_level == 10 and player.y == 0: make_map_village()
            else: player_move_or_attack(0, -1)
        elif key.vk == libtcod.KEY_KP7:
            player_move_or_attack(-1, -1)
        elif key.vk == libtcod.KEY_KP6 or key.vk == libtcod.KEY_RIGHT:
            player_move_or_attack(1, 0)
        elif key.vk == libtcod.KEY_KP5:
            fov_recompute = False
        elif key.vk == libtcod.KEY_SHIFT:# and libtcod.KEY_KP5:
            game_state = 'waiting'
            message('Resting..')
            #[FIX] Need to add some way to wait for a long time here
        elif key.vk == libtcod.KEY_KP4 or key.vk == libtcod.KEY_LEFT:
            player_move_or_attack(-1, 0)
        elif key.vk == libtcod.KEY_KP3:
            player_move_or_attack(1, 1)
        elif key.vk == libtcod.KEY_KP2 or key.vk == libtcod.KEY_DOWN:
            player_move_or_attack(0, 1)
        elif key.vk == libtcod.KEY_KP1:
            player_move_or_attack(-1, 1)
        else:
            # Check for other key presses
            if key_char == ',' or key.vk == libtcod.KEY_KP0:
                # Pick up item
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break

            elif key_char == '>':
                if stairsdown.x == player.x and stairsdown.y == player.y:
                    next_level()

#            elif key_char == 'b':

            elif key_char == 'c':
                # Magic!
                chosen_magic = magic_menu('What magic to use?\n')
                if chosen_magic is not None:
                    chosen_magic.use()

            elif key_char == 'd':
                #show the inventory; if an item is selected, drop it
                chosen_item = inventory_menu('Press the key next to an item to drop it, or any other to cancel.\n')
                if chosen_item is not None:
                    chosen_item.drop()

            elif key_char == 'e':
                chosen_item = inventory_menu('Which item do you want to equip?.\n')
                if chosen_item is not None:
                    if chosen_item.isweapon == 'one':
                        hand = None
                        while hand == None:  #keep asking until a choice is made
                            hand = menu('In which hand do you want to equip it?\n',
                                          ['Right hand\n','Left hand'], LEVEL_SCREEN_WIDTH,'a')
                            if hand == 0:
                                w_hand='right'
                            elif hand == 1:
                                w_hand='left'
                        chosen_item.equip(weapon_hand=w_hand)

            elif key_char == 'l':
                #show inventory of monster at current location
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.lootable == 'yes':
                        chosen_item = object.display_inventory(object.name + '\n')
                        if chosen_item != None:
                            # If items is not None (=will crash game), use pickup command and remove manually
                            chosen_item.pick_up(looted='yes')
                            object.inventory.remove(chosen_item.owner)

#            elif key_char == 't':

            elif key_char == 'u' or key.vk == libtcod.KEY_KPENTER:
                chosen_item = inventory_menu('Press the key next to an item to use it, or any other to cancel\n')
                if chosen_item is not None:
                    chosen_item.use()

            elif key_char == 'x':
                target_do = 'no'
                target_tile(focus=player)

            else:
                return 'didnt_take_turn'

    elif game_state == 'targeting':

        if key.vk == libtcod.KEY_KP9:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x + 1, xy_tile.y - 1):
                xy_tile.x += 1
                xy_tile.y -= 1
        elif key.vk == libtcod.KEY_KP8:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x, xy_tile.y - 1):
                xy_tile.y -= 1
        elif key.vk == libtcod.KEY_KP7:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x - 1, xy_tile.y - 1):
                xy_tile.x -= 1
                xy_tile.y -= 1
        elif key.vk == libtcod.KEY_KP6:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x + 1, xy_tile.y):
                xy_tile.x += 1
        elif key.vk == libtcod.KEY_KP4:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x - 1, xy_tile.y):
                xy_tile.x -= 1
        elif key.vk == libtcod.KEY_KP3:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x + 1, xy_tile.y + 1):
                xy_tile.x += 1
                xy_tile.y += 1
        elif key.vk == libtcod.KEY_KP2:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x, xy_tile.y + 1):
                xy_tile.y += 1
        elif key.vk == libtcod.KEY_KP1:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x - 1, xy_tile.y + 1):
                xy_tile.x -= 1
                xy_tile.y += 1
        elif key.vk == libtcod.KEY_KP5:
            ttile_x = xy_tile.x
            ttile_y = xy_tile.y
            objects.remove(xy_tile)
            game_state = 'playing'
            if target_do == 'blink':
                do_blink(ttile_x, ttile_y)
            elif target_do == 'magic_missile':
                do_magic_missile(ttile_x, ttile_y)
            else: return  'didnt_take_turn'
        elif key.vk == libtcod.KEY_ESCAPE:
            objects.remove(xy_tile)
            game_state = 'playing'
            return 'didnt_take_turn'

#########################################
######### Death functions #########
# This must be placed after attacks and stuff
def player_death(player):
    global game_state
    message('You have died!', libtcod.red)
    game_state = 'dead'
    player.char = '%'
    player.color = libtcod.dark_red

def monster_death(monster):
    message(monster.name.capitalize() + ' was slain', libtcod.yellow)
    monster.char = '%'
    monster.color = libtcod.dark_red
    monster.blocks = False
    monster.lootable = 'yes'
    monster.ai = None
    monster.name = 'a ' + monster.name + ' corpse'
    #Drop all held items and put into inventory
    if monster.fighter.equip_helm.name != '':
        monster.inventory.append(monster.fighter.equip_helm)
    if monster.fighter.equip_armor.name != '':
        monster.inventory.append(monster.fighter.equip_armor)
    if monster.fighter.equip_rhand.name != '':
        monster.inventory.append(monster.fighter.equip_rhand)
    if monster.fighter.equip_lhand.name != '':
        monster.inventory.append(monster.fighter.equip_lhand)
    monster.fighter = None
###################################
######### Graphic User Interface #########
# Rendering the GUI
def render_bar(x, y, total_width, name, value, maximum, bar_color, back_color):
    # Calculate bar width..
    bar_width = int(float(value) / maximum * total_width)
    
    # Render background
    libtcod.console_set_background_color(panel, back_color)
    libtcod.console_rect(panel, x, y, total_width, 1, False)
    
    # Now render bar on top
    libtcod.console_set_background_color(panel, bar_color)
    if bar_width > 0:
        libtcod.console_rect(panel, x, y, bar_width, 1, False)

    # Centered text with values
    libtcod.console_set_foreground_color(panel, libtcod.white)
    libtcod.console_print_center(panel, x + total_width / 2, y, libtcod.BKGND_NONE,
                                 name + ': ' + str(value) + '/' + str(maximum))

##########################################
################################
#        Initialisation        #
################################
# Set graphics here
libtcod.console_set_custom_font(FONT, libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_TCOD)
libtcod.console_init_root(SCREEN_WIDTH, SCREEN_HEIGHT, 'Travel!', False)
libtcod.sys_set_fps(LIMIT_FPS)
con = libtcod.console_new(SCREEN_WIDTH, SCREEN_HEIGHT)
panel = libtcod.console_new(SCREEN_WIDTH, PANEL_HEIGHT)

# Set modes here 
def main_menu():
    img = libtcod.image_load('main_menu.png')

    while not libtcod.console_is_window_closed():
        libtcod.image_blit_2x(img, 0, 0, 0)
        
        # Game title and credits
        libtcod.console_set_foreground_color(0, libtcod.dark_red)
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT/2-4, libtcod.BKGND_NONE, 'Travel!')
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT-2, libtcod.BKGND_NONE, 'A python roguelike')
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT-1, libtcod.BKGND_NONE, 'Created by Olle Kvarnstr;m')
        # Print all the options
        choise = menu('', ['Continue last game','Start a new game','Quit'], 24)
        if choise == 0:
            try:
                load_game()
            except:
                msgbox('\n Could not locate savegame.\n', 24)
                continue
            play_game()
        elif choise == 1:
            new_game()
            play_game()
        elif choise == 2:
            break

def save_game():
    #open a new empty shelve (possibly overwriting an old one) to write the game data
    file = shelve.open('savegame', 'n')
    file['map'] = map
    file['objects'] = objects
    file['player_index'] = objects.index(player)  #index of player in objects list
    file['game_msgs'] = game_msgs
    file['game_state'] = game_state
    file['dungeon_level'] = dungeon_level
    file['dungeon_name'] = dungeon_name
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1:
        file['stairs_index'] = objects.index(stairsdown)
#    if dungeon_name == 'Cave' and dungeon_level == 10:
#        file['portal'] = objects.index(portal)
    file.close()
 
def load_game():
    #open the previously saved shelve and load the game data
    global map, objects, player, game_msgs, game_state, stairsdown, dungeon_level, dungeon_name
 
    file = shelve.open('savegame', 'r')
    map = file['map']
    objects = file['objects']
    player = objects[file['player_index']]  #get index of player in objects list and access it
    game_msgs = file['game_msgs']
    game_state = file['game_state']
    dungeon_level = file['dungeon_level']
    dungeon_name = file['dungeon_name']
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1:
        stairsdown = objects[file['stairs_index']]
#    if dungeon_name == 'Cave' and dungeon_level == 10:
#        portal = objects[file['portal']]
    file.close()
    initialize_fov()

def new_game():
    global game_msgs, game_state, dungeon_level, dungeon_name
    player_race = None
    player_class = None
    while player_race == None:
        choose_race = menu('Please select your race', ['Human (f/r/m)','Elf (f/r/m)','Gnome (f/r/m)','Dwarf (f/r)'], 24,'1','1')
        if choose_race == 0: # human
            player_race = 'human'
        elif choose_race == 1: # elf
            player_race = 'elf'
        elif choose_race == 2: # gnome
            player_race = 'gnome'
        elif choose_race == 3: # dwarf
            player_race = 'dwarf'
    while player_class == None:
        choose_class = menu('Please select your class', ['Fighter','Rogue','Mage',''], 24,'1','1')
        if choose_class == 0: # fighter
            player_class = 'fighter'
        elif choose_class == 1: # rogue:
            player_class = 'rogue'
        elif choose_class == 2 and player_race != 'dwarf': # mage
            player_class = 'mage'

    new_player(player_race, player_class)

    # Generate the map
    dungeon_name = 'Cave'
    dungeon_level = 1
    make_map_cave()
    #dungeon_name = 'Village'
    #dungeon_level = 0
    #make_map_village()
    initialize_fov()

    game_state = 'playing'
    game_msgs = []

    message('Entering the old cave..', libtcod.red)

def initialize_fov():
    global fov_recompute, fov_map
    fov_recompute = True
    libtcod.console_clear(con)  #unexplored areas start black (which is the default background color)

    fov_map = libtcod.map_new(MAP_WIDTH, MAP_HEIGHT)
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            libtcod.map_set_properties(fov_map, x, y, not map[x][y].block_sight, not map[x][y].blocked)

def play_game():
    global recover, game_state, empty_component, empty
    empty_component = Item(isweapon='one', melee_damage_min=1, melee_damage_max=2)
    empty = Object(0, 0, '/', '', libtcod.dark_grey, item=empty_component)
    player_action = None
    while not libtcod.console_is_window_closed():

        # Render the screen
        render_all()
        libtcod.console_flush()
        check_level_up()
        # Remove all objects before they move
        for object in objects:
            object.clear()

        # Handle keys and exit game if needed
        player_action = handle_keys()
        if player_action == 'exit':
            if game_state == 'waiting': game_state = 'playing'
            save_game()
            break

        # Monsters do stuff here
        if (game_state == 'playing' and player_action != 'didnt_take_turn') or game_state == 'waiting':
            for object in objects:
                if object.ai:
                    object.ai.take_turn()

        # Waiting is done here
#        message ('wait-check1')
        if game_state == 'waiting':
            for object in objects:
                if object.ai and object != player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
                    message(object.name.capitalize() + ' in sight!')
                    game_state = 'playing'
        if game_state == 'waiting' and player.fighter.hp == player.fighter.max_hp and player.fighter.mp == player.fighter.max_mp:
            message('You feel refreshed')
            game_state = 'playing'

       # Heal mana & HP
        if (game_state == 'playing' and player_action != 'didnt_take_turn') or game_state == 'waiting':
#        if game_state == 'playing' and player_action != 'didnt_take_turn':
            if game_state == 'waiting': recover += 3
            recover += 1
            if recover > 20:
                recover = 0
#            if recover % MANA_RECOVER == 0: # if divisible by MANA_RECOVER:
                player.fighter.mp += 1
                if player.fighter.mp > player.fighter.max_mp:
                    player.fighter.mp = player.fighter.max_mp
#            if recover % HP_RECOVER == 0: # if divisible by HP_RECOVER:
                player.fighter.hp += 1
                if player.fighter.hp > player.fighter.max_hp:
                    player.fighter.hp = player.fighter.max_hp

main_menu()


