#! /usr/bin/env python
################################
#  Initial setup and settings  #####################################################################################################
################################
import libtcodpy as libtcod
import math
import textwrap
import shelve
################################
#         ALL DEFINES          #####################################################################################################
################################
# Graphic settings
#FONT = 'font/arial12x12.png'
FONT = 'font/arial10x10.png'
LIMIT_FPS = 20 # Max frames per second

# Screen Dimensions
# 1366 x 768
SCREEN_WIDTH = 136;SCREEN_HEIGHT = 76
#SCREEN_WIDTH = 80;#SCREEN_HEIGHT = 50

# Map Dimensions
MAP_WIDTH = 136;MAP_HEIGHT = 60
#MAP_WIDTH = 80;#MAP_HEIGHT = 42

# GUI Dimensions
BAR_WIDTH = 20
PANEL_HEIGHT = 16#PANEL_HEIGHT = 8
PANEL_Y = SCREEN_HEIGHT - PANEL_HEIGHT

# GUI Message Bar
MSG_X = BAR_WIDTH + 2
MSG_WIDTH = SCREEN_WIDTH - BAR_WIDTH - 2
MSG_HEIGHT = PANEL_HEIGHT - 1

# Level Screen
LEVEL_SCREEN_WIDTH = 40
CHARACTER_SCREEN_WIDTH = 30

# Colors for Building
color_dark_wall = libtcod.dark_grey
color_light_wall = libtcod.desaturated_orange
color_dark_ground = libtcod.grey
color_light_ground = libtcod.desaturated_yellow

##############################
# Gameplay Settings
# Dungeon Generator Dimensions
ROOM_MAX_SIZE = 10
ROOM_MIN_SIZE = 6
MAX_ROOMS = 30

# Max in rooms
MAX_ROOM_MONSTERS = 3
MAX_ROOM_ITEMS = 2

# FOV
FOV_ALGO = 0  #default FOV algorithm
FOV_LIGHT_WALLS = True
TORCH_RADIUS = 10

# Inventory
INVENTORY_WIDTH = 50

HEAL_AMOUNT = 40
MANA_RECOVER = 10
HP_RECOVER = 10
recover = 0
LIGHTNING_DAMAGE = 40
LIGHTNING_RANGE = 5
CONFUSE_NUM_TURNS = 10
FIREBALL_RADIUS = 3
FIREBALL_DAMAGE = 25

# Basic dices
def dnd_dice(min, max):
    dice = libtcod.random_get_int(0, min, max)
    return dice

target_do = 'no'
################################
#        CLASSES / [CLASS]     #####################################################################################################
################################
class Object: #[object]
    def __init__(self, x, y, char, name, color, race=None, blocks=False, lootable='no',
                 always_visible=False, inventory=None, spellbook=None, fighter=None, ai=None, item=None): #[GM]
        self.x = x
        self.y = y
        self.char = char
        self.name = name
        self.color = color
        self.race = race
        self.lootable = lootable
        self.blocks = blocks
        self.always_visible = always_visible
        self.inventory = inventory
        self.spellbook = spellbook
        self.fighter = fighter
        if self.fighter:
            self.fighter.owner = self
        self.ai = ai
        if self.ai:
            self.ai.owner = self
        self.item = item
        if self.item:
            self.item.owner = self

######### Commands living creatures can use #########
    def move(self, dx, dy): #[o.move]
        if not is_blocked(self.x + dx, self.y + dy):
            self.x += dx
            self.y += dy

    def random_move(self):
        x=0
        dx = dnd_dice (-1, 1)
        dy = dnd_dice (-1, 1)
        while is_blocked(self.x + dx, self.y + dy) and x < 20:
            dx = dnd_dice (-1, 1)
            dy = dnd_dice (-1, 1)
            x +=1
        self.move(dx, dy)

    def move_towards(self, target_x, target_y): #[o.move_towards]
        dx = 0 #default is standing still
        dy = 0 #default is standing still
        #do a quickscan for quickest way to the target
        if self.distance(target_x - 1, target_y) < self.distance(target_x, target_y): dx = 1
        if self.distance(target_x + 1, target_y) < self.distance(target_x, target_y): dx = -1
        if self.distance(target_x, target_y - 1) < self.distance(target_x, target_y): dy = 1
        if self.distance(target_x, target_y + 1) < self.distance(target_x, target_y): dy = -1
        if not is_blocked(self.x + dx, self.y + dy): self.move(dx, dy)
        else: #if closest route is blocked, try to not move diagonally
            if not is_blocked(self.x, self.y + dy): self.move(0, dy)
            if not is_blocked(self.x + dx, self.y): self.move(dx, 0)
            
    def distance(self, x, y): #[o.distance]
        #return the distance to some coordinates
        return math.sqrt((x - self.x) ** 2 + (y - self.y) ** 2)

    def distance_to(self, other): #[o.distance_to]
        #return the distance to another object
        dx = other.x - self.x
        dy = other.y - self.y
        return math.sqrt(dx ** 2 + dy ** 2)    

    def display_inventory(self, header): #[o.display_inventory]
        if len(self.inventory) == 0: options = [self.name + 's inventory is empty']
        else: options = [item.name for item in self.inventory]
        index = menu(header, options, INVENTORY_WIDTH, 'a')
        if index == None or len(self.inventory) == 0: return None
        return self.inventory[index].item

    def draw(self): #[o.draw]
        #only show if it's visible to the player; or it's set to "always visible" and on an explored tile
        if (libtcod.map_is_in_fov(fov_map, self.x, self.y) or
            (self.always_visible and map[self.x][self.y].explored)):
            #set the color and then draw the character that represents this object at its position
            libtcod.console_set_foreground_color(con, self.color)
            libtcod.console_put_char(con, self.x, self.y, self.char, libtcod.BKGND_NONE)

    def clear(self): #[o.clear]
        libtcod.console_put_char(con, self.x, self.y, ' ', libtcod.BKGND_NONE)

    def send_to_back(self): #[o.send_to_back]
        # Makes object drawn first, so it get's overwritten when possible
        global objects
        objects.remove(self)
        objects.insert(0, self)

# All classes
class Fighter: #[o.fighter]
    def __init__(self, hp, STR, DEX, CON, MAG, xp, mp=0, job=None, level=0, bab=0, death_function=None, 
                 equip_rhand=None, equip_lhand=None, equip_helm=None, equip_armor=None):
        # adding items to avoid bugs
        self.equip_rhand = equip_rhand
        if self.equip_rhand == None: self.equip_rhand = AC_empty
        self.equip_lhand = equip_lhand
        if self.equip_lhand == None: self.equip_lhand = AC_empty
        self.equip_helm = equip_helm
        if self.equip_helm == None: self.equip_helm = AC_empty
        self.equip_armor = equip_armor
        if self.equip_armor == None: self.equip_armor = AC_empty
        #rest self. are here
        self.hp = int(hp);self.max_hp = int(hp)
        self.STR = int(STR)
        self.DEX = int(DEX)
        self.CON = int(CON)
        self.MAG = int(MAG)
        self.xp = xp;self.max_mp = mp
        self.mp = mp
        self.job = job
        self.level = level
        self.bab = bab
        self.death_function = death_function

    def attack(self, target): #[o.f.attack]
        #check dmg
        mindmg = self.equip_rhand.item.melee_damage_min
        maxdmg = self.equip_rhand.item.melee_damage_max
        damage = dnd_dice(mindmg, maxdmg) + int((self.STR -10)/2)
        #check ac
        target.fighter.DEXmod = int((target.fighter.DEX -10)/2)
        if target.fighter.DEXmod > target.fighter.equip_armor.item.max_dexmod: 
            target.fighter.DEXmod = int(target.fighter.equip_armor.item.max_dexmod)
        ac = 10 + target.fighter.equip_armor.item.melee_ac_bonus + target.fighter.DEXmod
        #check ab
        self.DEXmod = int((self.DEX-10)/2)
        self.STRmod = int((self.STR-10)/2)
        if self.DEXmod > self.equip_armor.item.max_dexmod: 
            self.DEXmod = int(self.equip_armor.item.max_dexmod)
        if self.DEXmod > self.STRmod: ab = int(self.DEXmod + self.bab)
        else: ab = int(self.STRmod + self.bab)
        
        if ab + dnd_dice(1,20) < ac: #check ab vs ac to hit
            message(self.owner.name.capitalize() + ' attacks '+ target.name +' but misses', libtcod.orange)
        else: #if ab >= ac
            if damage > 0:
                message(self.owner.name.capitalize() + ' damages ' + target.name + '(' + str(damage) + ' damage)', libtcod.orange)
                target.fighter.take_damage(damage)
            else:
                message(self.owner.name.capitalize() + ' attacks ' + target.name + ' but was unable to cause any damage', libtcod.orange)

    def throw (self, ammo, target):
        #AC
        target.fighter.DEXmod = int((target.fighter.DEX -10)/2)
        if target.fighter.DEXmod > target.fighter.equip_armor.item.max_dexmod: 
            target.fighter.DEXmod = int(target.fighter.equip_armor.item.max_dexmod)
        ac = 10 + target.fighter.equip_armor.item.melee_ac_bonus + target.fighter.DEXmod
        #AB
        self.DEXmod = int((self.DEX-10)/2)
        if self.DEXmod > self.equip_armor.item.max_dexmod: 
            self.DEXmod = int(self.equip_armor.item.max_dexmod)
        ab = int(self.DEXmod + self.bab)
        #DMG
        damage = dnd_dice(ammo.item.melee_damage_min, ammo.item.melee_damage_max)
        #the fight
        if ab + dnd_dice(1,20) < ac: #AB vs AC. If miss:
            message(self.owner.name.capitalize() + ' throws a '+ammo.name+' towards '+ target.name +' but misses', libtcod.orange)
        else: #If hit:
            message(self.owner.name.capitalize() + ' throws a '+ammo.name+' towards '+ target.name +' and hits!' +
                    '(' + str(damage) + ' damage)', libtcod.orange)
            target.fighter.take_damage(damage)
        #relocate thrown object
        ammo.x = target.x
        ammo.y = target.y
        objects.append(ammo)
        if ammo == player.fighter.equip_rhand: player.fighter.equip_rhand = AC_empty
        if ammo == player.fighter.equip_lhand: player.fighter.equip_lhand = AC_empty
        ammo = None

    def take_damage(self, damage): #[o.f.take_damage]
        if damage > 0:
            self.hp -= damage
            if self.hp <= 0:
                function = self.death_function
                if function is not None:
                    function(self.owner)
                if self.owner != player:
                    player.fighter.xp += (300 + 100*(self.level - player.fighter.level))/4

    def heal(self, amount): #[o.f.heal]
        self.hp += amount
        if self.hp > self.max_hp:
            self.hp = self.max_hp


# AI
class BasicMonster: #[ai.monster]
    def __init__(self, state='normal', chasing_x=None, chasing_y=None):
        # I think this is needed for the AI chasing to work..
        self.state = state
        self.chasing_x = chasing_x
        self.chasing_y = chasing_y
    def take_turn(self):
        monster = self.owner
        if libtcod.map_is_in_fov(fov_map, monster.x, monster.y): #attacking player is number 1 priority
            self.chasing_x = player.x #remember where player last was seen
            self.chasing_y = player.y #remember where player last was seen
            self.state = 'chasing' #if player has been spotten he will find you
            if monster.distance_to(player) >= 2: #if not close, move towards player
                monster.move_towards(player.x, player.y)
            elif player.fighter.hp > 0: #if close and alive, attack!
                monster.fighter.attack(player)
        else: #if cannot find player
            if self.state == 'chasing': #if has seen player, move towards last seen point
                if monster.x == self.chasing_x and monster.y == self.chasing_y:
                    self.state = 'normal'
                    monster.random_move()
                else: monster.move_towards(self.chasing_x, self.chasing_y)
            else: monster.random_move()

#################
### Items ###
class Item: #[o.item]
    def __init__(self, use_function = None, equippable='no', weight='none', melee_damage_min=None, melee_damage_max=None, melee_ac_bonus=0, max_dexmod=100):
        # equippable = hand, hands, helm, armor, no, all
        self.use_function = use_function
        self.equippable = equippable
        self.weight = weight
        self.melee_damage_min = melee_damage_min
        self.melee_damage_max = melee_damage_max
        self.melee_ac_bonus = melee_ac_bonus
        self.max_dexmod = max_dexmod

    def equip(self, weapon_hand='none'): #[o.i.equip]
        self.weapon_hand = weapon_hand
        if self.equippable == 'hand' and weapon_hand == 'right':
            if player.fighter.equip_rhand.name == '':
                player.fighter.equip_rhand = self.owner
                player.inventory.remove(self.owner)
                message('Equipped ' + self.owner.name + ' to the right hand')
            else: message('You already have an item equipped in your right hand')
        elif self.equippable == 'hand' and weapon_hand == 'left':
            if player.fighter.equip_lhand.name =='':
                player.fighter.equip_lhand = self.owner
                player.inventory.remove(self.owner)
                message('Equipped ' + self.owner.name + ' to the left hand')
            else: message('You already have an item equipped in your left hand')
        elif self.equippable == 'helm':
            if player.fighter.equip_helm.name == '':        
                player.fighter.equip_helm = self.owner
                player.inventory.remove(self.owner)
                message('Equipped ' + self.owner.name)
            else: message('You already have a helmet equipped')
        elif self.equippable == 'armor':
            if player.fighter.equip_armor.name == '':        
                player.fighter.equip_armor = self.owner
                player.inventory.remove(self.owner)
                message('Equipped ' + self.owner.name)
            else: message('You already have an armor equipped')
        else:
            message(self.owner.name + ' cannot be equipped')

    def use(self): #[o.i.use]
        if self.use_function == None:
            message ('The ' + self.owner.name + ' cannot be used')
        else:
            self.use_function()
#            if self.use_function() != 'cancelled' or self.use_function() != 'magic':
#                player.inventory.remove(self.owner)

    def pick_up(self, looted='no'): #[o.i.pick_up]
        self.looted = looted
        # Add to inventory, remove from map
        if len(player.inventory) >= 26:
            message('Your inventory is full!')
        else:
            player.inventory.append(self.owner)
            if looted == 'no':
                objects.remove(self.owner)
            message ('Picked up ' + self.owner.name, libtcod.green)

    def drop(self): #[o.i.drop]
        objects.append(self.owner)
        player.inventory.remove(self.owner)
        self.owner.x = player.x
        self.owner.y = player.y
        message('You drop ' + self.owner.name, libtcod.yellow)

################################
#           Building           #
################################
######### Initial definitions #########
# Tiles
class Tile: #[o.tile]
    def __init__(self, blocked, block_sight = None):
        self.blocked = blocked

        # All lines start unexplored
        self.explored = False
#        self.explored = True #[GM]
        
        # By default, blocked tile blocks sight
        if block_sight is None: block_sight = blocked
        self.block_sight = block_sight

# Rectangles for rooms and structures
class Rect: #[o.rect]
    def __init__(self, x, y, w, h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h

    def center(self):
        center_x = (self.x1 + self.x2) / 2
        center_y = (self.y1 + self.y2) / 2
        return (center_x, center_y)
 
    def intersect(self, other):
        #returns true if this rectangle intersects with another one
        return (self.x1 <= other.x2 and self.x2 >= other.x1 and
                self.y1 <= other.y2 and self.y2 >= other.y1)

################################
#      ALL DEF'S DOES HERE     #####################################################################################################
################################
# Functions for mapmaking
# Rooms
def create_room(room): #[d.map_room]
    global map
    #go through the tiles in the rectangle and make them passable    
    for x in range(room.x1 + 1, room.x2):
        for y in range(room.y1 + 1, room.y2):
            map[x][y].blocked = False
            map[x][y].block_sight = False

# Tunnel / Horisontal
def create_h_tunnel(x1, x2, y): #[d.map.tunnel_h]
    global map
    #horizontal tunnel. min() and max() are used in case x1>x2
    for x in range(min(x1, x2), max(x1, x2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

# Tunnel / Vertical
def create_v_tunnel(y1, y2, x): #[d.map.tunnel_v]
    global map
    for y in range(min(y1, y2), max(y1, y2) + 1):
        map[x][y].blocked = False
        map[x][y].block_sight = False

################################
#    Objects and Functions     #
################################
# Definition of living creatures
#####################################################
# Check Blocked
def is_blocked(x, y): #[d.map.blocked]
    if map[x][y].blocked:
        return True
    for object in objects:
        if object.blocks and object.x == x and object.y == y:
            return True
    return False

#Check for visible monsters and remove them (mapmaking)
def remove_visible_monsters():
    global objects
    for object in objects:
        if object.fighter and object != player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
            message(object.name + ' has been kicked', libtcod.red)
            objects.remove(object)
            
# Check for closest monster
def closest_monster(max_range): #[d.map.closest_monster]
    closest_enemy = None
    closest_dist = max_range + 1

    for object in objects:
        if object.fighter and not object == player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
            dist = player.distance_to(object)
            if dist < closest_dist:
                closest_enemy = object
                closest_dist = dist
    return closest_enemy

# Random monster / item generator
def random_choice_index(chances): #[o.map.random_choise_index]
    dice = libtcod.random_get_int(0, 1, sum(chances))
    #go through all chances, keeping the sum so far
    running_sum = 0
    choice = 0
    for w in chances:
        running_sum += w
        #See if the dice landed in the part that corresponds to this choice
        if dice <= running_sum:
            return choice
        choice += 1
 
def random_choice(chances_dict):
    #choose one option from dictionary of chances, returning its key
    chances = chances_dict.values()
    strings = chances_dict.keys()
 
    return strings[random_choice_index(chances)]

def from_dungeon_level(table):
    #returns a value that depends on level. the table specifies what value occurs after each level, default is 0.
    for (value, level) in reversed(table):
        if dungeon_level >= level:
            return value
    return 0

# Decend deeper
def next_level():
    global dungeon_level
   
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1:
        message('You descend deeper...', libtcod.red)
        dungeon_level += 1
        make_map_cave()  #create a fresh new level!
        initialize_fov()
        remove_visible_monsters()
    else: message('You cannot go further down at the moment...')
##### LEVEL UP IS HERE #####
# Check for level up
def check_level_up():
    if player.fighter.xp >= player.fighter.level*1000:
        player.fighter.xp -= player.fighter.level*1000
        player.fighter.level += 1
        message('You reached level ' + str(player.fighter.level) + '!', libtcod.yellow)
        #ADD HP/MP
        if player.fighter.job == 'mage': 
            hpup = dnd_dice(1,6) 
            mpup = dnd_dice(1,10)
        elif player.fighter.job == 'rogue': 
            hpup = dnd_dice(1,8) 
            mpup = dnd_dice(1,6)
        elif player.fighter.job == 'fighter': 
            hpup = dnd_dice(1,10)
            mpup = 0
        player.fighter.hp_base += hpup
        if player.fighter.job != 'fighter': player.fighter.mp_base += mpup
        #ADD BAB
        if player.fighter.job == 'fighter':
            player.fighter.bab = player.fighter.level
        elif player.fighter.job == 'rogue':
            if player.fighter.level in (1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,21,22,23,25,26,27,29,30,31,33,34,35,37,38,39):
                player.fighter.bab += 1
        elif player.fighter.job == 'mage':
            player.fighter.bab = math.floor(player.fighter.level/2)
        #ADD ABILITY
        if player.fighter.level in (4, 8, 12, 16, 20, 24, 28, 32, 36, 40):
            choice = None
            while choice == None:
                choice = menu('Level up! Choose a stat to raise:\n',
                              ['+1 Strength, currently ' + str(player.fighter.STR),
                               '+1 Dexterity, currently ' + str(player.fighter.DEX),
                               '+1 Constitution, currently ' + str(player.fighter.CON),
                               '+1 Magic, currently ' + str(player.fighter.MAG)], LEVEL_SCREEN_WIDTH,'a')
                if choice == 0:
                    player.fighter.STR += 1
                elif choice == 1:
                    player.fighter.DEX += 1
                elif choice == 2:
                    player.fighter.CON += 1
                elif choice == 3:
                    player.fighter.MAG += 1
        #ADD FEAT
#        if player.fighter.level in (3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39):
#            choice = None
#            while choice == None:
#                choice = menu('Level up! Choose a feat:\n',
#                              [,
#                               ,
#                               ,
#                               ], LEVEL_SCREEN_WIDTH,'a')
#                if choice == 0:
#                elif choice == 1:
#                elif choice == 2:
#                elif choice == 3:
    #Cleaning up. Setting all static info
        player.fighter.max_hp = player.fighter.hp_base + int(((player.fighter.CON -10)/2)*player.fighter.level)
        player.fighter.max_mp = player.fighter.mp_base + int(((player.fighter.MAG -10)/2)*player.fighter.level)
        if player.race == 'dwarf': player.fighter.max_mp = 0
        player.fighter.mp = player.fighter.max_mp
        player.fighter.hp = player.fighter.max_hp


#Normal targeting.. Basically, targeting = on
def target_tile(focus):
    global game_state, xy_tile
    x = focus.x
    y = focus.y
    xy_tile = Object(x, y, 'X', 'targeting', libtcod.red)
    objects.append(xy_tile)
    game_state = 'targeting'

# Targeting-lookup
def targeting_info():
    if game_state == 'targeting': target = xy_tile
    else: target = player

    names = [obj.name for obj in objects
             if obj.x == target.x and obj.y == target.y and obj != target]
    names = ', '.join(names)
    return names.capitalize()

def do_throw():
    global target_do, ammo
    choice = None
    while choice not in (0,1,2):# == None:
        choice = menu('Which item do you want to throw?\n',
                      ['R Hand: ' + player.fighter.equip_rhand.name + '\n',
                      'L Hand: ' + player.fighter.equip_lhand.name + '\n',
                      'Cancel'], LEVEL_SCREEN_WIDTH)
        if choice == 0:   ammo = player.fighter.equip_rhand
        elif choice == 1: ammo = player.fighter.equip_lhand
        elif choice == 2: return
    #check if item is legal
    if ammo.name == '': ammo = None #if empty, return
    elif ammo.item.weight != 'light':
        message (ammo.name+' is too heavy to throw',libtcod.yellow)
        ammo = None
    else: #if everything is fine
        enemy = closest_monster(15)
        if enemy == None: enemy = player
        target_do = 'throw'
        target_tile(focus=enemy)
    
##### SPELLS/*
def cast_blink(): #BLINK
    global target_do
    if player.fighter.mp >= 10:
        target_do = 'blink'
        target_tile(focus=player)
        return 'magic'
    else:
        message('Not enough mana!',libtcod.red)
        return 'cancelled'
def do_blink(x, y):
    if not is_blocked(x, y):
        player.x = x
        player.y = y
        player.fighter.mp -= 10
        fov_recompute = True
        target_do = 'no'
    else: 
        message ('You cannot blink to that location')
        target_do = 'no'
        return 'didnt_take_turn'

def cast_magic_missile(): #MAGICMISSILE
    global target_do
    ai_take_turn()
    if player.fighter.mp >= 2:
        enemy = closest_monster(15)
        if enemy == None: enemy = player
        target_do = 'magic_missile'
        target_tile(focus=enemy)
        return 'magic'
    else:
        message('Not enough mana!',libtcod.red)
        return 'cancelled'
def do_magic_missile(x, y):
    ma = dnd_dice(1,4) + 1
    mb = dnd_dice(1,4) + 1
    mc = dnd_dice(1,4) + 1
    md = dnd_dice(1,4) + 1
    me = dnd_dice(1,4) + 1
    for object in objects:
        if object.x == x and object.y == y and object.fighter and object != player:
            if player.fighter.level in (1, 2): # 1 missile                
                message('Magic missile hits ' + object.name + ' for ' + str(ma) + ' damage.',libtcod.orange)
                object.fighter.take_damage(ma)
            elif player.fighter.level in (3,  4): # 2 missile
                dmg = ma + mb
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            elif player.fighter.level in (5, 6): # 3 missile
                dmg = ma + mb + mc
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            elif player.fighter.level in (7, 8): # 4 missile
                dmg = ma + mb + mc + md
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            elif player.fighter.level >= 9: # 5 missile
                dmg = ma + mb + mc + md + me
                message('Magic missile hits ' + object.name + ' for ' + str(dmg) + ' damage.',libtcod.orange)
                object.fighter.take_damage(dmg)
            target_do = 'no'
            player.fighter.mp -= 2
    else: 
#        message ('No target')
        target_do = 'no'
        return 'didnt_take_turn'
                

def cast_heal(): #HEAL
    # Heal the player
    if player.fighter.hp == player.fighter.max_hp:
        message('You are already at full health', libtcod.red)
        return 'cancelled'
    else:
        message('Your wounds start to feel better', libtcod.light_violet)
        player.fighter.heal(HEAL_AMOUNT)
        return 'magic'

def cast_lightning(): #LIGHTNING
    monster = closest_monster(LIGHTNING_RANGE)
    if monster is None:
        message('No enemy is close enough to strike', libtcod.red)
        return 'cancelled'
    else:
        message('A lightning bolt strikes ' + monster.name + ' with a loud thunder', libtcod.light_blue)
        monster.fighter.take_damage(LIGHTNING_DAMAGE)
        return 'magic'

#####*/SPELLS
# Small msgbox from menu command
def msgbox(text, width=50, color=libtcod.white):
    menu(text, [], width, color=color)

# Menu here
def menu (header, options, width, sorting='1', transparency='0.7', color=libtcod.white):
    if len(options) > 26: raise ValueError('You cannot have a menu with more than 26 options')
    # Calculate total height for header after autowrap with 1 line per option
    header_height = libtcod.console_height_left_rect(con, 0, 0, width, SCREEN_HEIGHT, header)
    height = len(options) + header_height
    # Off console with options view
    window = libtcod.console_new(width, height)
    # Print header with autowrap
    libtcod.console_set_foreground_color(window, color)
    libtcod.console_print_left_rect(window, 0, 0, width, height, libtcod.BKGND_NONE, header)
    # Print all the options
    y = header_height
    if header == '':
        header_height = 0
    letter_index = ord(sorting)
    for option_text in options:
        text = '(' + chr(letter_index) + ')' + option_text
        libtcod.console_print_left(window, 0, y, libtcod.BKGND_NONE, text)
        y += 1
        letter_index += 1
    # Blit
    x = SCREEN_WIDTH/2 - width/2
    y = SCREEN_HEIGHT/2 - height/2
#    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 0.7)
    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, float(transparency))
    # Wait for keypress
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)
    if key.vk == libtcod.KEY_ENTER and key.lalt:  #(special case) Alt+Enter: toggle fullscreen
        libtcod.console_set_fullscreen(not libtcod.console_is_fullscreen())

    #convert the ASCII code to an index; if it corresponds to an option, return it
    index = key.c - ord(sorting)
    if index >= 0 and index < len(options): return index
    return None

def remove_item():
    choice = None
    while choice == None:  #keep asking until a choice is made
        choice = menu('Which item do you want to remove?\n',
                      ['Helm: ' + player.fighter.equip_helm.name + '\n',
                       'Armor: ' + player.fighter.equip_armor.name + '\n',
                       'R Hand: ' + player.fighter.equip_rhand.name + '\n',
                       'L Hand: ' + player.fighter.equip_lhand.name + '\n'], LEVEL_SCREEN_WIDTH)
        if choice == 0:
            if player.fighter.equip_helm.name == '':
                message('You have no helmet to remove')
            else:
                message('Unequipped ' + player.fighter.equip_helm.name)
                player.inventory.append(player.fighter.equip_helm)
                player.fighter.equip_helm = AC_empty
        if choice == 1:
            if player.fighter.equip_armor.name == '':
                message('You have no armor to remove')
            else:
                message('Unequipped ' + player.fighter.equip_armor.name)
                player.inventory.append(player.fighter.equip_armor)
                player.fighter.equip_armor = AC_empty
        if choice == 2:
            if player.fighter.equip_rhand.name == '':
                message('Your right hand is empty')
            else:
                message('Unequipped ' + player.fighter.equip_rhand.name + ' from right hand')
                player.inventory.append(player.fighter.equip_rhand)
                player.fighter.equip_rhand = AC_empty
        if choice == 3:
            if player.fighter.equip_lhand.name == '':
                message('Your left hand is empty')
            else:
                message('Unequipped ' + player.fighter.equip_lhand.name + ' from left hand')
                player.inventory.append(player.fighter.equip_lhand)
                player.fighter.equip_lhand = AC_empty

# Inventory
def inventory_menu(header):
    if len(player.inventory) == 0:
        options = ['Inventory is empty']
    else:
        options = [item.name for item in player.inventory]
    index = menu(header, options, INVENTORY_WIDTH, 'a')

    if index == None or len(player.inventory) == 0: return None
    return player.inventory[index].item
# Spellbook
def magic_menu(header):
    if len(player.spellbook) == 0:
        message ('You know no magic')
        return None
    else:
        options = [item.name for item in player.spellbook]
    index = menu(header, options, INVENTORY_WIDTH, '1')

    if index == None or len(player.spellbook) == 0: return None
    return player.spellbook[index].item
##### DEFINES OH DEFINES! #####
def list_of_defines():
    global AC_empty, AC_w_dagger, AC_w_shortsword, AC_w_longsword, AC_a_cloak, AC_a_leather_armor, AC_a_chainmail, AC_s_blink, AC_s_magic_missile

    empty_component = Item(equippable='all', melee_damage_min=1, melee_damage_max=2, melee_ac_bonus=0, max_dexmod=100)
    AC_empty = Object(0, 0, '', '', libtcod.dark_grey, item=empty_component)
    # Weapons
    dagger_component = Item(equippable='hand', weight='light', melee_damage_min=1, melee_damage_max=4)
    AC_w_dagger = Object(0, 0, '/', 'dagger', libtcod.dark_grey, item=dagger_component)
    shortsword_component = Item(equippable='hand', weight='medium', melee_damage_min=1, melee_damage_max=6)
    AC_w_shortsword = Object(0, 0, '', 'shortsword', libtcod.dark_grey, item=shortsword_component)
    longsword_component = Item(equippable='hand', weight='medium', melee_damage_min=1, melee_damage_max=8)
    AC_w_longsword = Object(0, 0, '', 'longsword', libtcod.dark_grey, item=longsword_component)
    # Armor
    cloak_component = Item(equippable='armor', melee_ac_bonus=2, max_dexmod=100)
    AC_a_cloak = Object(0, 0, '(', 'Cloak', libtcod.darker_green, item=cloak_component)
    leather_armor_component = Item(equippable='armor', melee_ac_bonus=4, max_dexmod=8)
    AC_a_leather_armor = Object(0, 0, '[', 'leather armor', libtcod.darker_orange, item=leather_armor_component)
    chainmail_component = Item(equippable='armor', melee_ac_bonus=6, max_dexmod=4)
    AC_a_chainmail = Object(0, 0, '[', 'chainmail', libtcod.dark_grey, item=chainmail_component)
    # Spells
    blink_component = Item(use_function=cast_blink)
    AC_s_blink = Object(0, 0, '', 'blink (10 mana)', libtcod.dark_grey, item=blink_component)
    magic_missile_component = Item(use_function=cast_magic_missile)
    AC_s_magic_missile = Object(0, 0, '', 'magic missile (2 mana)', libtcod.dark_grey, item=magic_missile_component)

############
# Create new player
def new_player(player_race, player_class):
    global player
    human_component = Fighter(hp=20, STR=8, DEX=8, CON=8, MAG=8, xp=0, mp=0, job=player_class, level=1, death_function=player_death)
    elf_component = Fighter(hp=16, STR=6, DEX=10, CON=6, MAG=10, xp=0, mp=0, job=player_class,level=1, death_function=player_death)
    gnome_component = Fighter(hp=18, STR=7, DEX=9, CON=7, MAG=9, xp=0, mp=0, job=player_class,level=1, death_function=player_death)
    dwarf_component = Fighter(hp=24, STR=10, DEX=6, CON=10, MAG=0, xp=0, mp=0, job=player_class,level=1, death_function=player_death)
    if player_race == 'human': player_component = human_component
    elif player_race == 'elf': player_component = elf_component
    elif player_race == 'gnome': player_component = gnome_component
    elif player_race == 'dwarf': player_component = dwarf_component
    player_inventory = []
    player_spellbook = []
    # Done with defines
    player = Object(0, 0, '@', 'player', libtcod.white, race=player_race, 
                    blocks=True, inventory=player_inventory, spellbook=player_spellbook, fighter=player_component)
    if player_class == 'fighter':
        player.fighter.hp_base = 10
        player.fighter.mp_base = 0
        player.fighter.bab = 1
        player.fighter.equip_armor = AC_a_chainmail
        player.fighter.equip_rhand = AC_w_shortsword
    if player_class == 'rogue':
        player.fighter.hp_base = 8
        if player_race == 'dwarf': player.fighter.mp_base = 0
        else: player.fighter.mp_base = 6
        player.fighter.equip_armor = AC_a_leather_armor
        player.fighter.equip_rhand = AC_w_shortsword
    if player_class == 'mage':
        player.fighter.hp_base = 6
        player.fighter.mp_base = 10
        #player.fighter.equip_rhand = staff
        player.fighter.equip_armor = AC_a_cloak
        player.spellbook.append(AC_s_magic_missile)
    #pointbuy
    pointbuy_done = False
    points_left = 20
    tempSTR = player.fighter.STR
    tempDEX = player.fighter.DEX
    tempCON = player.fighter.CON
    tempMAG = player.fighter.MAG
    while pointbuy_done == False:
        choice = menu('Which ability do you want to improve?\n\n' + str(points_left) + 
                      ' points left                Score' + '\n',
                      ['Strength +1                ' + str(tempSTR) + '\n',
                       'Dexterity +1               ' + str(tempDEX) + '\n',
                       'Constitution +1            ' + str(tempCON) + '\n',
                       'Magic +1                   ' + str(tempMAG) + '\n\n',
                       'Clear all',
                       'Done!'], LEVEL_SCREEN_WIDTH, '1','1')
        if choice == 0: 
            if tempSTR < 14 and points_left >= 1:
                tempSTR += 1
                points_left -= 1
            elif tempSTR in (14,15) and points_left >= 2:
                tempSTR += 1
                points_left -= 2
            elif tempSTR in (16,17) and points_left >= 3:
                tempSTR += 1
                points_left -= 3
        elif choice == 1: 
            if tempDEX < 14 and points_left >= 1:
                tempDEX += 1
                points_left -= 1
            elif tempDEX in (14,15) and points_left >= 2:
                tempDEX += 1
                points_left -= 2
            elif tempDEX in (16,17) and points_left >= 3:
                tempDEX += 1
                points_left -= 3
        elif choice == 2: 
            if tempCON < 14 and points_left >= 1:
                tempCON += 1
                points_left -= 1
            elif tempCON in (14,15) and points_left >= 2:
                tempCON += 1
                points_left -= 2
            elif tempCON in (16,17) and points_left >= 3:
                tempCON += 1
                points_left -= 3
        elif choice == 3 and player_race != 'dwarf': 
            if tempMAG < 14 and points_left >= 1:
                tempMAG += 1
                points_left -= 1
            elif tempMAG in (14,15) and points_left >= 2:
                tempMAG += 1
                points_left -= 2
            elif tempMAG in (16,17) and points_left >= 3:
                tempMAG += 1
                points_left -= 3
        elif choice == 4:
            points_left = 20
            tempSTR = player.fighter.STR
            tempDEX = player.fighter.DEX
            tempCON = player.fighter.CON
            tempMAG = player.fighter.MAG
        elif choice == 5:
            player.fighter.STR = tempSTR
            player.fighter.DEX = tempDEX
            player.fighter.CON = tempCON
            player.fighter.MAG = tempMAG
            pointbuy_done = True
    #Add the CONmod to HP
    player.fighter.hp = player.fighter.hp_base + int((player.fighter.CON -10)/2)
    player.fighter.max_hp = player.fighter.hp
    #Add MAGmod to MP
    player.fighter.mp = player.fighter.mp_base + int((player.fighter.MAG -10)/2)
    if player.fighter.mp < 0: player.fighter.mp = 0
    player.fighter.max_mp = player.fighter.mp
##################################
#Character Information 's'
def character_information():
    #1:DEFINES
    #modifiers as INT for calculation
    STRmod = int((player.fighter.STR -10)/2)
    DEXmod = int((player.fighter.DEX -10)/2)
    if DEXmod > player.fighter.equip_armor.item.max_dexmod:
        DEXmod = int(player.fighter.equip_armor.item.max_dexmod)
    CONmod = int((player.fighter.CON -10)/2)
    MAGmod = int((player.fighter.MAG -10)/2)
    #ab
    if player.fighter.DEX > player.fighter.STR: ab = int((player.fighter.DEX - 10)/2 + player.fighter.bab)
    else: ab = int((player.fighter.STR - 10)/2 + player.fighter.bab)
    #ac
    armor_ac = player.fighter.equip_armor.item.melee_ac_bonus
    ac = int(10 + armor_ac + DEXmod)
    #check dmg..
    mindmg = int(player.fighter.equip_rhand.item.melee_damage_min)
    maxdmg = int(player.fighter.equip_rhand.item.melee_damage_max)
    #modifiers change to STR for printing
    if STRmod >= 0: STRmod = str('+'+str(STRmod))
    if DEXmod >= 0: DEXmod = str('+'+str(DEXmod))
    if CONmod >= 0: CONmod = str('+'+str(CONmod))
    if MAGmod >= 0: MAGmod = str('+'+str(MAGmod))
    if armor_ac >= 0: armor_ac = str('+'+str(armor_ac))
    if ab >= 0: ab = str('+'+str(ab))


    # 2. PRINT IT OUT
    #Initial setup
    window = libtcod.console_new(MAP_WIDTH, MAP_HEIGHT)
    libtcod.console_rect(window, 0, 0,  MAP_WIDTH, MAP_HEIGHT, True, libtcod.BKGND_NONE)
    xone = 1
    xtwo = xone + 16
    xthree = xtwo + 10
    yone = 1
    ytwo = yone + 2
    ythree = ytwo + 6
    yfour = ythree + 8
    #LIGHT ORANGE
    libtcod.console_set_foreground_color(window, libtcod.light_orange)
    libtcod.console_print_left(window,xone,yone,libtcod.BKGND_SET, "--- Character Information ---")
    libtcod.console_print_left(window,xone,yone+1,libtcod.BKGND_SET,"Class         Race      Level")
    libtcod.console_print_left(window,xone,ytwo+2,libtcod.BKGND_SET,"Attribute     Level   Modifier ")
    libtcod.console_print_left(window,xone,ythree+2,libtcod.BKGND_SET,"Battle        Stat")
    libtcod.console_print_left(window,xone,yfour,libtcod.BKGND_SET, "--------- Equipment ---------")
    #ORANGE
    libtcod.console_set_foreground_color(window, libtcod.orange)
    libtcod.console_print_left(window,xone,ytwo+3,libtcod.BKGND_SET,"Strength:     ")
    libtcod.console_print_left(window,xone,ytwo+4,libtcod.BKGND_SET,"Dexterity:    ")
    libtcod.console_print_left(window,xone,ytwo+5,libtcod.BKGND_SET,"Constitution: ")
    libtcod.console_print_left(window,xone,ytwo+6,libtcod.BKGND_SET,"Magic:        ")
    libtcod.console_print_left(window,xone,ythree+3,libtcod.BKGND_SET,"BAB:")
    libtcod.console_print_left(window,xone,ythree+4,libtcod.BKGND_SET,"Attack:")
    libtcod.console_print_left(window,xone,ythree+5,libtcod.BKGND_SET,"Damage:")
    libtcod.console_print_left(window,xone,ythree+6,libtcod.BKGND_SET,"Armor:")
    libtcod.console_print_left(window,xone,yfour+1,libtcod.BKGND_SET,"Helm:")
    libtcod.console_print_left(window,xone,yfour+2,libtcod.BKGND_SET,"Armor:")
    libtcod.console_print_left(window,xone,yfour+3,libtcod.BKGND_SET,"R Hand:")
    libtcod.console_print_left(window,xone,yfour+4,libtcod.BKGND_SET,"L Hand:")
    #WHITE
    libtcod.console_set_foreground_color(window, libtcod.white)
    libtcod.console_print_left(window,xone,yone+2,libtcod.BKGND_SET,player.fighter.job.capitalize())
    libtcod.console_print_center(window,xtwo,yone+2,libtcod.BKGND_SET,player.race.capitalize())
    libtcod.console_print_center(window,xthree,yone+2,libtcod.BKGND_SET,str(player.fighter.level))
    libtcod.console_print_center(window,xtwo,ytwo+3,libtcod.BKGND_SET,str(int(player.fighter.STR)))
    libtcod.console_print_center(window,xtwo,ytwo+4,libtcod.BKGND_SET,str(int(player.fighter.DEX)))
    libtcod.console_print_center(window,xtwo,ytwo+5,libtcod.BKGND_SET,str(int(player.fighter.CON)))
    libtcod.console_print_center(window,xtwo,ytwo+6,libtcod.BKGND_SET,str(int(player.fighter.MAG)))
    libtcod.console_print_center(window,xthree,ytwo+3,libtcod.BKGND_SET,str(STRmod))
    libtcod.console_print_center(window,xthree,ytwo+4,libtcod.BKGND_SET,str(DEXmod))
    libtcod.console_print_center(window,xthree,ytwo+5,libtcod.BKGND_SET,str(CONmod))
    libtcod.console_print_center(window,xthree,ytwo+6,libtcod.BKGND_SET,str(MAGmod))
    libtcod.console_print_center(window,xtwo,ythree+3,libtcod.BKGND_SET,str(player.fighter.bab))
    libtcod.console_print_center(window,xtwo,ythree+4,libtcod.BKGND_SET,str(ab))
    libtcod.console_print_center(window,xtwo,ythree+5,libtcod.BKGND_SET,str(mindmg) + "d" + str(maxdmg) + str(STRmod))
    libtcod.console_print_center(window,xtwo,ythree+6,libtcod.BKGND_SET,str(ac))
    if player.fighter.equip_helm.name != '':
        libtcod.console_print_left(window,xtwo-6,yfour+1,libtcod.BKGND_SET,player.fighter.equip_helm.name + " [" + "+0"  + "]")
    if player.fighter.equip_armor.name != '':
        libtcod.console_print_left(window,xtwo-6,yfour+2,libtcod.BKGND_SET,player.fighter.equip_armor.name + " [" + armor_ac  + "]")
    if player.fighter.equip_rhand.name != '':
        libtcod.console_print_left(window,xtwo-6,yfour+3,libtcod.BKGND_SET,player.fighter.equip_rhand.name + " [" + "+0,+0"  + "]")
    if player.fighter.equip_lhand.name != '':
        libtcod.console_print_left(window,xtwo-6,yfour+4,libtcod.BKGND_SET,player.fighter.equip_lhand.name + " [" + "+0,+0"  + "]")
#    libtcod.console_print_left(window,1,1,libtcod.BKGND_SET, "String with a %cgreen%c word."%(libtcod.COLCTRL_1,libtcod.COLCTRL_STOP))
#    libtcod.console_print_left(window,1,2,libtcod.BKGND_SET, "String with a %cyellow%c word."%(libtcod.COLCTRL_2,libtcod.COLCTRL_STOP))
#    libtcod.console_print_left(window,1,3,libtcod.BKGND_SET, "String with a %cgreen%c word."%(libtcod.COLCTRL_3,libtcod.COLCTRL_STOP))

    # Blit
#    libtcod.console_blit(window, 0, 0, width, height, 0, x, y, 1.0, 0.7)
    libtcod.console_blit(window, 0, 0, MAP_WIDTH, MAP_HEIGHT, 0, 0, 0, 1.0, 1)
    # Wait for keypress
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)

##################################
def place_objects(room):
    
    #maximum number of monsters per room
    max_monsters = from_dungeon_level([[4, 1], [6, 4], [8, 6]])
 
    #chance of each monster
    monster_chances = {}
    monster_chances['goblin'] = 80  #goblin always shows up, even if all other monsters have 0 chance
    monster_chances['goblinelite'] = from_dungeon_level([[10, 3], [25, 5], [50, 7]])
 
    #choose random number of monsters
    num_monsters = libtcod.random_get_int(0, 0, max_monsters)
 
    for i in range(num_monsters):
        #choose random spot for this monster
        x = libtcod.random_get_int(0, room.x1+1, room.x2-1)
        y = libtcod.random_get_int(0, room.y1+1, room.y2-1)
 
        #only place it if the tile is not blocked
        if not is_blocked(x, y):
            choice = random_choice(monster_chances)
            if choice == 'goblin':
####            #DEFINE GOBLIN/*
                monster_inventory = []
                fighter_component = Fighter(hp=4, STR=8, DEX=8, CON=11, MAG=0, xp=35,level=1, death_function=monster_death)
                ai_component = BasicMonster()
                monster = Object(x, y, 'g', 'goblin', libtcod.yellow, blocks=True, inventory=monster_inventory, fighter=fighter_component, ai=ai_component)
                monster.fighter.equip_rhand = AC_w_shortsword
                if dnd_dice(1, 5) == 1:
                    monster.inventory.append(AC_w_dagger)
###             *\DEFINE GOBLIN#
###             #DEFINE GOBLINELITE/*
            elif choice == 'goblinelite':
                monster_inventory = []
                fighter_component = Fighter(hp=17, STR=15, DEX=13, CON=11, MAG=0, xp=100, level=3, death_function=monster_death)
                ai_component = BasicMonster()
                monster = Object(x, y, 'g', 'goblin elite', libtcod.orange,
                                 blocks=True, inventory=monster_inventory, fighter=fighter_component, ai=ai_component)
                monster.fighter.equip_rhand = AC_w_shortsword
                if dnd_dice(1,10) >= 8: monster.fighter.equip_armor = AC_a_chainmail
                else: monster.fighter.equip_armor = AC_a_leather_armor

 ###            *\DEFINE GOBLINELITE#
            objects.append(monster)
#################################### 
######### Creating the map #########
#################################### 
##### Cave map
def make_map_cave():
    global map, objects, stairsdown, portal
    objects = [player]

    # Fill map with blocked tiles..
    map = [[ Tile(True)
        for y in range(MAP_HEIGHT) ]
           for x in range(MAP_WIDTH) ]
    rooms = []
    num_rooms = 0
    for r in range(MAX_ROOMS):
        #random width and height
        w = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        h = libtcod.random_get_int(0, ROOM_MIN_SIZE, ROOM_MAX_SIZE)
        #random position without going out of the boundaries of the map
        x = libtcod.random_get_int(0, 0, MAP_WIDTH - w - 1)
        y = libtcod.random_get_int(0, 0, MAP_HEIGHT - h - 2) #changed this to 2, because there seems to be some issues..
         #"Rect" class makes rectangles easier to work with
        new_room = Rect(x, y, w, h)
         #run through the other rooms and see if they intersect with this one
        failed = False
        for other_room in rooms:
            if new_room.intersect(other_room):
                failed = True
                break
        if not failed:
            #this means there are no intersections, so this room is valid
             #"paint" it to the map's tiles
            create_room(new_room)
             #add some contents to this room, such as monsters
            place_objects(new_room)
             #center coordinates of new room, will be useful later
            (new_x, new_y) = new_room.center()
            if num_rooms == 0:
                #this is the first room, where the player starts at
                player.x = new_x
                player.y = new_y
            else:
                #all rooms after the first:
                #connect it to the previous room with a tunnel
                 #center coordinates of previous room
                (prev_x, prev_y) = rooms[num_rooms-1].center()
                 #draw a coin (random number that is either 0 or 1)
                if libtcod.random_get_int(0, 0, 1) == 1:
                    #First move horizontally, then vertically
                    create_h_tunnel(prev_x, new_x, prev_y)
                    create_v_tunnel(prev_y, new_y, new_x)
                else:
                    #first move vertically, then horizontally
                    create_v_tunnel(prev_y, new_y, prev_x)
                    create_h_tunnel(prev_x, new_x, new_y)
           #finally, append the new room to the list
            rooms.append(new_room)
            num_rooms += 1
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1: #Make stairs down until level 10..            
        stairsdown = Object(new_x, new_y, '>', 'stairs going down', libtcod.white, always_visible=True)
        objects.append(stairsdown)
        stairsdown.always_visible = True  #items are visible even out-of-FOV, if in an explored area
    if dungeon_name == 'Cave' and dungeon_level == 10: #Make a tunnel to the village
        x = dnd_dice(10, 70)
        y = 0
        Tunnel = False
        while Tunnel == False:
            if is_blocked(x, y):
                map[x][y].blocked = False 
                map[x][y].block_sight = False
                y += 1
            else: 
                Tunnel = True

##### Village
def make_map_village():
    global map, objects
    objects = [player]
    player.x = MAP_WIDTH/2
    player.y = 41

    allx = range(MAP_WIDTH)
    ally = range(MAP_HEIGHT)

    map = [[ Tile(True)
             for y in range(MAP_HEIGHT) ]
           for x in range(MAP_WIDTH) ]
#    create_v_tunnel(y1,y2,x)
    create_v_tunnel(30,41,40)
    create_v_tunnel(30,35,41)
    create_v_tunnel(30,35,39)
    create_v_tunnel(31,34,38)
    create_v_tunnel(0,41,0)
    create_v_tunnel(0,41,79)
    create_h_tunnel(0,79,0)
    create_h_tunnel(0,79,41)


####################################
# All ai take turn
def ai_take_turn():
    for object in objects:
        if object.ai:
            object.ai.take_turn()
######### Rendering... #########
def render_all():
    global fov_map, color_dark_wall, color_light_wall
    global color_dark_ground, color_light_ground
    global fov_recompute

    # Recompute FOV
    if fov_recompute:
        #recompute FOV if needed (the player moved or something)
        fov_recompute = False
        libtcod.map_compute_fov(fov_map, player.x, player.y, TORCH_RADIUS, FOV_LIGHT_WALLS, FOV_ALGO)

    # Set background color
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            visible = libtcod.map_is_in_fov(fov_map, x, y)
            wall = map[x][y].block_sight
            if not visible:
                    #it's out of the player's FOV
                if map[x][y].explored:
                    if wall: libtcod.console_set_back(con, x, y, color_dark_wall, libtcod.BKGND_SET)
                    else: libtcod.console_set_back(con, x, y, color_dark_ground, libtcod.BKGND_SET)
            else:
                    #it's visible
                    if wall: libtcod.console_set_back(con, x, y, color_light_wall, libtcod.BKGND_SET )
                    else: libtcod.console_set_back(con, x, y, color_light_ground, libtcod.BKGND_SET )                        
                    map[x][y].explored = True

    # Draw stuff in list
    for object in objects:
        if object != player:
            object.draw()
        player.draw()

    # Blit is here. Moved stuff from con to root console.
    libtcod.console_blit(con, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, 0)

##### GUI Part goes here ####
    # Clean up a bit
    libtcod.console_set_background_color(panel, libtcod.black)
    libtcod.console_clear(panel)
    # Show Player stats
    render_bar(1, 4, BAR_WIDTH, 'Health', player.fighter.hp, player.fighter.max_hp, 
               libtcod.red, libtcod.darker_red)
    if player.fighter.max_mp != 0:
        render_bar(1, 2, BAR_WIDTH, 'Mana', player.fighter.mp, player.fighter.max_mp,
                   libtcod.blue, libtcod.darker_blue)
    render_bar(1,6, BAR_WIDTH, 'XP', player.fighter.xp, player.fighter.level*1000, libtcod.yellow, libtcod.darker_yellow)
        # Showing level name, two options here...
    if dungeon_level > 0: render_bar(1, 0, BAR_WIDTH, dungeon_name + ' level ' + str(dungeon_level), 551337, 551337, libtcod.black, libtcod.black)
    else: render_bar(1, 0, BAR_WIDTH, dungeon_name, 551337, 551337, libtcod.black, libtcod.black)
    # "look" info here. Either targeting or "You are standing on..."
    libtcod.console_set_foreground_color(panel, libtcod.light_gray)
    libtcod.console_print_left(panel, 22, 0, libtcod.BKGND_NONE, targeting_info())
    # Collect messages and print them
    y = 1
    for (line, color) in game_msgs:
        libtcod.console_set_foreground_color(panel, color)
        libtcod.console_print_left(panel, MSG_X, y, libtcod.BKGND_NONE, line)
        y += 1
    # Blit panel > root console
    libtcod.console_blit(panel, 0, 0, SCREEN_WIDTH, PANEL_HEIGHT, 0, 0, PANEL_Y)
#############################
# Message part
def message (new_msg, color = libtcod.white):
    new_msg_lines = textwrap.wrap(new_msg, MSG_WIDTH)
    for line in new_msg_lines:
        # If buffer is full, remove the first line
        if len(game_msgs) == MSG_HEIGHT:
            del game_msgs[0]
        # Add new line
        game_msgs.append( (line, color) )
################################
# Movement functions
def player_move_or_attack(dx, dy):
    global fov_recompute, targeted_tile

    #Check what is there and grep it
    x = player.x + dx
    y = player.y + dy
    target = None
    for object in objects:
        if object.fighter and object.x == x and object.y == y:
            target = object
            break
    if target != None:
        player.fighter.attack(target)
    else:
        player.move(dx, dy)
        fov_recompute = True

######### Key-pressing commands #########
def handle_keys():
    global fov_recompute, game_state, target_do

    key = libtcod.console_check_for_keypress(libtcod.KEY_PRESSED) # Real-time
    #key = libtcod.console_wait_for_keypress(True) # Turn-based
    key_char = chr(key.c)

    if key.vk == libtcod.KEY_ENTER and key.lalt:  #(special case) Alt+Enter: toggle fullscreen
        libtcod.console_set_fullscreen (not libtcod.console_is_fullscreen())
    elif key.vk == libtcod.KEY_ESCAPE and game_state != 'targeting':
        return 'exit'

    elif key_char == 'p': player.fighter.xp = player.fighter.xp + 100

    elif key_char == 's':
        character_information()

    if game_state == 'playing':
        #Movement
        if key.vk == libtcod.KEY_KP9:
            player_move_or_attack(1, -1)
        elif key.vk == libtcod.KEY_KP8 or key.vk == libtcod.KEY_UP:
            if dungeon_name == 'Cave' and dungeon_level == 10 and player.y == 0: make_map_village()
            else: player_move_or_attack(0, -1)
        elif key.vk == libtcod.KEY_KP7:
            player_move_or_attack(-1, -1)
        elif key.vk == libtcod.KEY_KP6 or key.vk == libtcod.KEY_RIGHT:
            player_move_or_attack(1, 0)
        elif key.vk == libtcod.KEY_KP5:
            fov_recompute = False
        elif key.vk == libtcod.KEY_SHIFT:# and libtcod.KEY_KP5:
            game_state = 'waiting'
            message('Resting..')
        elif key.vk == libtcod.KEY_KP4 or key.vk == libtcod.KEY_LEFT:
            player_move_or_attack(-1, 0)
        elif key.vk == libtcod.KEY_KP3:
            player_move_or_attack(1, 1)
        elif key.vk == libtcod.KEY_KP2 or key.vk == libtcod.KEY_DOWN:
            player_move_or_attack(0, 1)
        elif key.vk == libtcod.KEY_KP1:
            player_move_or_attack(-1, 1)
        else:
            # Check for other key presses
            if key.vk == libtcod.KEY_KP0:
                # Pick up item
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break

            elif key_char == '>':
                if stairsdown.x == player.x and stairsdown.y == player.y:
                    next_level()
#            elif key_char == 'a':
#            elif key_char == 'b':

            elif key_char == 'c':
                # Magic!
                chosen_magic = magic_menu('What magic to use?\n')
                if chosen_magic is not None:
                    chosen_magic.use()

            elif key_char == 'd':
                #show the inventory; if an item is selected, drop it
                chosen_item = inventory_menu('Press the key next to an item to drop it, or any other to cancel.\n')
                if chosen_item is not None:
                    chosen_item.drop()

            elif key_char == 'e':
                chosen_item = inventory_menu('Which item do you want to equip?.\n')
                if chosen_item is not None:
                    if chosen_item.equippable == 'hand':
                        hand = None
                        while hand == None:  #keep asking until a choice is made
                            hand = menu('In which hand do you want to equip it?\n',
                                          ['Right hand\n','Left hand'], LEVEL_SCREEN_WIDTH,'a')
                            if hand == 0:
                                w_hand='right'
                            elif hand == 1:
                                w_hand='left'
                        chosen_item.equip(weapon_hand=w_hand)
                    else: chosen_item.equip()
                        

            elif key_char == 'l':
                #show inventory of monster at current location
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.lootable == 'yes':
                        chosen_item = object.display_inventory(object.name + '\n')
                        if chosen_item != None:
                            # If items is not None (=will crash game), use pickup command and remove manually
                            chosen_item.pick_up(looted='yes')
                            object.inventory.remove(chosen_item.owner)

            elif key_char == 'o': remove_visible_monsters()
            elif key_char == 'r': remove_item()

            elif key_char == 't': do_throw()

            elif key_char == 'u' or key.vk == libtcod.KEY_KPENTER:
                chosen_item = inventory_menu('Press the key next to an item to use it, or any other to cancel\n')
                if chosen_item is not None:
                    chosen_item.use()

            elif key_char == 'x':
                target_do = 'view'
                target_tile(focus=player)

            else:
                return 'didnt_take_turn'

    elif game_state == 'targeting':

        if key.vk == libtcod.KEY_KP9:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x + 1, xy_tile.y - 1):
                xy_tile.x += 1
                xy_tile.y -= 1
        elif key.vk == libtcod.KEY_KP8:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x, xy_tile.y - 1):
                xy_tile.y -= 1
        elif key.vk == libtcod.KEY_KP7:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x - 1, xy_tile.y - 1):
                xy_tile.x -= 1
                xy_tile.y -= 1
        elif key.vk == libtcod.KEY_KP6:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x + 1, xy_tile.y):
                xy_tile.x += 1
        elif key.vk == libtcod.KEY_KP4:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x - 1, xy_tile.y):
                xy_tile.x -= 1
        elif key.vk == libtcod.KEY_KP3:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x + 1, xy_tile.y + 1):
                xy_tile.x += 1
                xy_tile.y += 1
        elif key.vk == libtcod.KEY_KP2:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x, xy_tile.y + 1):
                xy_tile.y += 1
        elif key.vk == libtcod.KEY_KP1:
            if libtcod.map_is_in_fov(fov_map, xy_tile.x - 1, xy_tile.y + 1):
                xy_tile.x -= 1
                xy_tile.y += 1
        elif key.vk == libtcod.KEY_KP5:
            ttile_x = xy_tile.x
            ttile_y = xy_tile.y
            objects.remove(xy_tile)
            game_state = 'playing'
            if target_do == 'blink': #SPELL: BLINK
                do_blink(ttile_x, ttile_y)
            elif target_do == 'magic_missile': #SPELL: MAGIC MISSILE
                do_magic_missile(ttile_x, ttile_y)
            elif target_do == 'throw': #THROW ITEM
                target_exists = False
                for object in objects: 
                    if object.x == ttile_x and object.y == ttile_y and object.fighter:
                        target = object
                        target_exists = True
                if target_exists: player.fighter.throw(ammo, target)
            else: return  'didnt_take_turn'
        elif key.vk == libtcod.KEY_ESCAPE:
            objects.remove(xy_tile)
            game_state = 'playing'
            return 'didnt_take_turn'

#########################################
######### Death functions #########
# This must be placed after attacks and stuff
def player_death(player):
    global game_state
    message('You have died!', libtcod.red)
    game_state = 'dead'
    player.char = '%'
    player.color = libtcod.dark_red

def monster_death(monster):
    message(monster.name.capitalize() + ' was slain', libtcod.yellow)
    monster.char = '%'
    monster.color = libtcod.dark_red
    monster.blocks = False
    monster.lootable = 'yes'
    monster.ai = None
    monster.name = 'a ' + monster.name + ' corpse'
    #Drop all held items and put into inventory
    if monster.fighter.equip_helm.name != '':
        monster.inventory.append(monster.fighter.equip_helm)
    if monster.fighter.equip_armor.name != '':
        monster.inventory.append(monster.fighter.equip_armor)
    if monster.fighter.equip_rhand.name != '':
        monster.inventory.append(monster.fighter.equip_rhand)
    if monster.fighter.equip_lhand.name != '':
        monster.inventory.append(monster.fighter.equip_lhand)
    monster.fighter = None
###################################
######### Graphic User Interface #########
# Rendering the GUI
def render_bar(x, y, total_width, name, value, maximum, bar_color, back_color):
    # Calculate bar width..
    bar_width = int(float(value) / maximum * total_width)
    
    # Render background
    libtcod.console_set_background_color(panel, back_color)
    libtcod.console_rect(panel, x, y, total_width, 1, False)
    
    # Now render bar on top
    libtcod.console_set_background_color(panel, bar_color)
    if bar_width > 0:
        libtcod.console_rect(panel, x, y, bar_width, 1, False)

    # Centered text with values
    libtcod.console_set_foreground_color(panel, libtcod.white)
    if value == 551337 and maximum == 551337:
        libtcod.console_print_center(panel, x + total_width / 2, y, libtcod.BKGND_NONE, name)
    else:
        libtcod.console_print_center(panel, x + total_width / 2, y, libtcod.BKGND_NONE,
                                     name + ': ' + str(value) + '/' + str(maximum))

##########################################
################################
#        Initialisation        #
################################
# Set graphics here
libtcod.console_set_custom_font(FONT, libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_TCOD)
libtcod.console_init_root(SCREEN_WIDTH, SCREEN_HEIGHT, 'Travel!', False)
libtcod.sys_set_fps(LIMIT_FPS)
con = libtcod.console_new(SCREEN_WIDTH, SCREEN_HEIGHT)
panel = libtcod.console_new(SCREEN_WIDTH, PANEL_HEIGHT)

# Set modes here 
def main_menu():
    img = libtcod.image_load('Gloomy_Mountain.png')
    list_of_defines()

    while not libtcod.console_is_window_closed():
        libtcod.image_blit_2x(img, 0, 0, 0)
        
        # Game title and credits
        libtcod.console_set_foreground_color(0, libtcod.dark_red)
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT/2-4, libtcod.BKGND_NONE, 'Travel!')
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT-2, libtcod.BKGND_NONE, 'A python roguelike')
        libtcod.console_print_center(0, SCREEN_WIDTH/2, SCREEN_HEIGHT-1, libtcod.BKGND_NONE, 'Created by Olle Kvarnstr;m')
        # Print all the options
        choise = menu('', ['Continue last game','Start a new game','Quit'], 24)
        if choise == 0:
            try:
                load_game()
            except:
                msgbox('\n Could not locate savegame.\n', 24)
                continue
            play_game()
        elif choise == 1:
            new_game()
            play_game()
        elif choise == 2:
            break

def save_game():
    #open a new empty shelve (possibly overwriting an old one) to write the game data
    file = shelve.open('savegame', 'n')
    file['map'] = map
    file['objects'] = objects
    file['player_index'] = objects.index(player)  #index of player in objects list
    file['game_msgs'] = game_msgs
    file['game_state'] = game_state
    file['dungeon_level'] = dungeon_level
    file['dungeon_name'] = dungeon_name
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1:
        file['stairs_index'] = objects.index(stairsdown)
    file.close()
 
def load_game():
    #open the previously saved shelve and load the game data
    global map, objects, player, game_msgs, game_state, stairsdown, dungeon_level, dungeon_name
 
    file = shelve.open('savegame', 'r')
    map = file['map']
    objects = file['objects']
    player = objects[file['player_index']]  #get index of player in objects list and access it
    game_msgs = file['game_msgs']
    game_state = file['game_state']
    dungeon_level = file['dungeon_level']
    dungeon_name = file['dungeon_name']
    if dungeon_name == 'Cave' and dungeon_level < 10 and dungeon_level >= 1:
        stairsdown = objects[file['stairs_index']]
    file.close()
    initialize_fov()

def new_game():
    global game_msgs, game_state, dungeon_level, dungeon_name
    player_race = None
    player_class = None
    while player_race == None:
        choose_race = menu('Please select your race', ['Human (f/r/m)','Elf (f/r/m)','Gnome (f/r/m)','Dwarf (f/r)'], 24,'1','1')
        if choose_race == 0: # human
            player_race = 'human'
        elif choose_race == 1: # elf
            player_race = 'elf'
        elif choose_race == 2: # gnome
            player_race = 'gnome'
        elif choose_race == 3: # dwarf
            player_race = 'dwarf'
    while player_class == None:
        choose_class = menu('Please select your class', ['Fighter','Rogue','Mage',''], 24,'1','1')
        if choose_class == 0: # fighter
            player_class = 'fighter'
        elif choose_class == 1: # rogue:
            player_class = 'rogue'
        elif choose_class == 2 and player_race != 'dwarf': # mage
            player_class = 'mage'

    new_player(player_race, player_class)

    # Generate the map
    dungeon_name = 'Cave'
    dungeon_level = 1
    make_map_cave()
    #dungeon_name = 'Village'
    #dungeon_level = 0
    #make_map_village()
    initialize_fov()

    game_state = 'playing'
    game_msgs = []

    remove_visible_monsters()
    message('Entering the old cave..', libtcod.red)

def initialize_fov():
    global fov_recompute, fov_map
    fov_recompute = True
    libtcod.console_clear(con)  #unexplored areas start black (which is the default background color)

    fov_map = libtcod.map_new(MAP_WIDTH, MAP_HEIGHT)
    for y in range(MAP_HEIGHT):
        for x in range(MAP_WIDTH):
            libtcod.map_set_properties(fov_map, x, y, not map[x][y].block_sight, not map[x][y].blocked)

def play_game():
    global recover, game_state
    player_action = None
    while not libtcod.console_is_window_closed():

        # Render the screen
        render_all()
        libtcod.console_flush()
        check_level_up()
        # Remove all objects before they move
        for object in objects:
            object.clear()

        # Handle keys and exit game if needed
        player_action = handle_keys()
        if player_action == 'exit':
            if game_state == 'waiting': game_state = 'playing'
            save_game()
            break

        # Monsters do stuff here
        if (game_state == 'playing' and player_action != 'didnt_take_turn') or game_state == 'waiting':
            ai_take_turn()

        # Waiting is done here
        if game_state == 'waiting':
            for object in objects:
                if object.ai and object != player and libtcod.map_is_in_fov(fov_map, object.x, object.y):
                    message(object.name.capitalize() + ' in sight!')
                    game_state = 'playing'
        if game_state == 'waiting' and player.fighter.hp == player.fighter.max_hp and player.fighter.mp == player.fighter.max_mp:
            message('You feel refreshed')
            game_state = 'playing'

       # Heal mana & HP
        if (game_state == 'playing' and player_action != 'didnt_take_turn') or game_state == 'waiting':
            if game_state == 'waiting': recover += 3
            recover += 1
            if recover > 20:
                recover = 0
                player.fighter.mp += 1
                if player.fighter.mp > player.fighter.max_mp:
                    player.fighter.mp = player.fighter.max_mp
                player.fighter.hp += 1
                if player.fighter.hp > player.fighter.max_hp:
                    player.fighter.hp = player.fighter.max_hp



main_menu()

